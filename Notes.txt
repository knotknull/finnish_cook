## Examples at:
http://examples.oreilly.com/0636920051381/

##  Download and install chefdk
##

curl  https://packages.chef.io/files/stable/chefdk/2.4.17/el/7/chefdk-2.4.17-1.el7.x86_64.rpm  -o chefdk-2.4.17-1.el7.x86_64.rpm -#
sudo yum install chefdk-2.4.17-1.el7.x86_64.rpm


##  To install Guest Additions automatically in the Vagrant VM
##
vagrant plugin install vagrant-vbguest


##  When installing chef, it installs into /opt/chefdk but creates soft links from /usr/bin to chefdk i.e.:
##  NOTE:  need to update .bashrc to link git and ruby versions installed in /opt/chefdk/embedded
##
ls -l /usr/bin/chef
lrwxrwxrwx. 1 root root 20 Feb 20 14:18 /usr/bin/chef -> /opt/chefdk/bin/chef

## Enter the below to .bashrc to get environment to point to git
## and ruby installed with chef.
##
eval "$(chef shell-init bash)"

## Jargon Alert !!
##

   - Programs in Chef called recipe.
   - recipe:  file that contains chef code (*.rb = ruby)
   - Chef is Ruby Domain Specific Language
   - Resource (i.e. file below) building blocks for chef code
      - defines actions for chef to perform
      - bracketed by do / end statement pair
      - Generic layout of resource:
            <resource_type> '<name>' do
              <attribute statement>
            end
   - Attribute is a parameter to a resource


## Chef recipe exmple
##

hello.rb:
---------

file 'hello.txt' do
  content 'Welcome to Finnish Cook'
end

## NOTE: file name can be single or double quotes.  Content is an attribute
## or parameter that is passed to the file resource.
## https://docs.chef.io/resource_file.html
##

## To run chef code, call chef-apply, it runs single files of chef .rb code.
##
chef-apply hello.rb

## Creates a file called hello.txt with the content described in the chef file
##
[vagrant@chefbox share]$ ls -ltr
total 12
-rw-r--r--. 1 vagrant vagrant 21 Feb 20 22:55 itchy
-rw-r--r--. 1 vagrant vagrant 60 Feb 20 23:22 hello.rb
-rw-r--r--. 1 vagrant vagrant 23 Feb 20 23:24 hello.txt
[vagrant@chefbox share]$ cat hello.txt
Welcome to Finnish Cook


## Cookstyle: Chef took to check syntax (lint checker)
## eg.     cookstyle hello.rb

## Change ruby linter to cookstyle
##
1. Start Atom
2. Atom > Preferences > Install
3. In Search packages enter linter-rubocop
4. After install go to settings
5. In Settings > Command, enter:
/opt/chefdk/bin/cookstyle
6. tab out of field
7. test against a .rb file

## Automate verification w/ inspec
## inspec: Inspect Infrastructure
##
inspec runs tests to validate the infrastructure that is created
by you chef reciple that you create:

1. create hello_test.rb to hold testing code (_test is a convention)
NOTE: This test detects the existence of hello.txt as well as its' contents

describe file('hello.txt') do
  it { should be_file }
  its('content') { should match('Welcome to Finnish Cook') }
end

NOTE: brace {} are short cut for do / end


2. At cli run inspec w/ inspec test file
> inspec exec hello_test.rb

Profile: tests from hello_test.rb (tests from hello_test.rb)
Version: (not specified)
Target:  local://


  File hello.txt
     ✔  should be file
     ✔  content should match "Welcome to Finnish Cook"

Test Summary: 2 successful, 0 failures, 0 skipped


Anatomy of a test file
- Verification building block
describe <resource_type> '<name>' do
  <checks>
end

INSPEC EXMAPLES at: https://docs.chef.io/inspec_reference.html
NOTE: resources mentioned in chef recipe will most likely have an 'audit'
inspec resource by the same name i.e. file.



 - Chef is a declarative language to express desired state (like SQL)

   -----------      ------------
  |           |    |            |      --------
  | resources |    | attributes |  -> | recipe |    <-    chef
  |           |    |            |      --------
   -----------      ------------

   - chef looks at resources and attributes in recipe and figures out how
     to get to desired state

   - You specify what end result must look like (desired state) not
     how to achieve it.

NOTE: can reference env vars as:   "#{ENV['HOME']}
      variable reference == #{}
      A string MUST have double quotes if it contains a variable reference to
      substitute the value of the variable, otherwise it would just print
      the varialbe name.  ENV variable is referenced as a hash:
             ${HOME} == #{ENV['HOME']}

     file "#{ENV['HOME']}/stone.txt" do
       content 'Written to stone.txt'
     end

## How to do an uninstall (by telling chef what NOT to do)
##
##  Resource Driven vs. Attribute Drive unistall

## Resource Driven
##
All resources can define what NOT to do.  For example, for file resource you
can change action.

i.e. implicit default action for file is create action.  To override the
default action explicitly call the delete action.
The ":" denotes a constant value (aka ruby symbol)

 file "#{ENV['HOME']}/stone.txt" do
   action :delete
 end

NOTE: Cannot provide a default "Undo" function.  Can use limited uninstall using
Attribute Driven uninstall
https://code.facebook.com/posts/1909042435988955/facebook-chef-cookbooks/

Scaling systems configuration at Facebook
https://www.youtube.com/watch?v=-YtZiVxEiJ8


## Chef Concepts
   - recipe:    file containing Chef code
   - resource:  abstraction for something managed by Chef (i.e. file)
   - attribute: parameters passed to a resource


##################################################################
##  Test Kitchen
##################################################################

Test Kitchen tool to deploy recipes to sandbox environment. Test Kitchen
creates a sandbox environment that simulates production env.

Test kitchen uses docker to create sandbox env.

> kitchen --version
Test Kitchen version 1.19.2

kitchen-dokken: test-kitchen plugin that provisions rapid cookbook
testing and container development using Docker and Chef

Run initialization command for kitchen env:
> kitchen init --driver=kitchen-dokken --provisioner=dokken
create  .kitchen.yml
create  chefignore
create  test/integration/default

NOTE: creates :
  .kitchen.yml:  configuration file for sandbox environment
  chefignore:    configuration file used for when you package up environment
  test:          creates test directory for inspec tests

## Verify kitchen.yml
##
Verify kitchen.yml file using command:  kitchen list

> kitchen list
Instance          Driver  Provisioner  Verifier  Transport  Last Action    Last Error
default-centos73  Dokken  Dokken       Inspec    Dokken     <Not Created>  <None>


## Create test instance: kitchen create
##
> kitchen create --log_level=debug
-----> Starting Kitchen (v1.19.2)
-----> Creating <default-centos73>...
D      driver - pulling chef/chef:latest centos 7.3.1611
D      driver - pulling chef/chef:latest chef/chef latest
D      driver - creating volume container chef-latest from chef/chef:latest
       Creating container chef-latest
D      driver - create_container args {"name"=>"chef-latest", "Cmd"=>"true", "Image"=>"chef/chef:latest", "HostConfig"=>{"NetworkMode"=>"dokken"}}
       Creating kitchen sandbox at /home/vagrant/.dokken/kitchen_sandbox/8d7db201dc-default-centos73
       Creating verifier sandbox at /home/vagrant/.dokken/verifier_sandbox/8d7db201dc-default-centos73
       Building work image..
D      driver - starting 8d7db201dc-default-centos73
       Creating container 8d7db201dc-default-centos73
D      driver - create_container args {"name"=>"8d7db201dc-default-centos73", "Cmd"=>["sh", "-c", "trap exit 0 SIGTERM; while :; do sleep 1; done"], "Image"=>"8d7db201dc-default-centos73:latest", "Hostname"=>"dokken", "Env"=>nil, "ExposedPorts"=>nil, "Volumes"=>nil, "HostConfig"=>{"Privileged"=>false, "VolumesFrom"=>["chef-latest"], "Binds"=>["/home/vagrant/.dokken/kitchen_sandbox/8d7db201dc-default-centos73:/opt/kitchen", "/home/vagrant/.dokken/verifier_sandbox/8d7db201dc-default-centos73:/opt/verifier"], "Dns"=>nil, "DnsSearch"=>nil, "Links"=>[], "CapAdd"=>[], "CapDrop"=>[], "SecurityOpt"=>[], "NetworkMode"=>"dokken", "PortBindings"=>nil, "Tmpfs"=>{}}, "NetworkingConfig"=>{"EndpointsConfig"=>{"dokken"=>{"Aliases"=>["dokken"]}}}}
       Finished creating <default-centos73> (1m6.46s).
-----> Kitchen is finished. (1m7.99s)


##  verify test instance was created: kitchen list
##
> kitchen list
Instance          Driver  Provisioner  Verifier  Transport  Last Action  Last Error
default-centos73  Dokken  Dokken       Inspec    Dokken     Created      <None>

NOTE: Last Action changed from  <Not Created> to Created !!

##  verify the running vm instances via docker
##
> docker ps
docker ps
CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS               NAMES
97c627d7f537        8d7db201dc-default-centos73:latest   "sh -c 'trap exit 0 S"   7 minutes ago       Up 7 minutes                            8d7db201dc-default-centos73


##  Login to the running test kitchen vm via: kitchen login default-centos73
##
> kitchen login default-centos73

##  Destroy the test kitchen vm via: kitchen destroy default-centos73
##
> kitchen destroy default-centos73
-----> Starting Kitchen (v1.19.2)
-----> Destroying <default-centos73>...
       Deleting kitchen sandbox at /home/vagrant/.dokken/kitchen_sandbox/8d7db201dc-default-centos73
       Deleting verifier sandbox at /home/vagrant/.dokken/verifier_sandbox/8d7db201dc-default-centos73
       Finished destroying <default-centos73> (0m0.28s).
-----> Kitchen is finished. (0m1.83s)

# Verify that running instance is destroyed via: kitchen list
> kitchen list
Instance          Driver  Provisioner  Verifier  Transport  Last Action    Last Error
default-centos73  Dokken  Dokken       Inspec    Dokken     <Not Created>  <None>

# Verify that running instance is destroyed via: docker ps
> docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES


###################################################################
## YAML side note
###################################################################

http://yaml-online-parser.appspot.com

List: collection of ordered values (sequence)
---
- Automate this
- Automate That
- Automate the other thing

NOTE: must be at same spacing level, number of spaces doesn't matter as long
as they are aligned.  Also, lists can be entered as [1,2,3].  Put lists inside
of lists with additional dashes:
- item 1
- item 2
  - item 2.1
  - item 2.2
-item 3

# for comments
Name/Value:  aka Map, Dictionary.  key / value pairs
url: http://x1.com
port: 8080
mode: 0664

# Nested maps via indentation:
website1:
  url: http://x1.com
  port: 8080
  mode: 0664
  owner: alice
website2:
  url: http://x2.com
  port: 9090
  mode: 0644
  owner: bob

# 1-line form of a hash:
website2:
  { url: "http://x2.com", port: 9090, mode: 0644, owner: bob }


###################################################################
## End of YAML side note
###################################################################

Test Kitchen config file has:
 - driver:     configure behavior of kitchen driver
 - transport:  describes networking protocol for host to communicate w/ sandbox
               (ssh, winrm, or dokken)
 - provisioner: how to run automation code (aka chefsolo, ansible, dokken)
                mounts chef code, does not install into vm
 - platforms:   configures sandbox instance (name and docker image)
 - verifier:    language to use for test kitchen (i.e. inspec)
 - suites:      defines parameters for testing

 Test Kitchen Lifecycle:

 kitchen create  ->  kitchen list  ->  kitchen login  ->  kitchen destroy


###################################################################
## Chef environment determination
###################################################################

Chef uses ohai to determine inventory of machines it manages

node: a machine that is managed by chef, runs recipes to get desired state.
includes: physical, virtual, cloud and container.
          switches, routers, storage, phones, watches, fitness devices, etc.

 - Node needs chef client installed to be managed by chef.


###################################################################
## How to install Chef on a production node
###################################################################

Download chef client package at https://downloads.chef.io
or
at https://docs.chef.io/install_omnibus.html via curl:

curl -L https://omnitruck.chef.io/install.sh | sudo bash

NOTE: Chefdk contains chef-client but chef-client is smaller

# chef-apply vs. chef-client
 - chef-apply  runs code in a single file
 - chef-client runs code across many recipe files at once


###################################################################
## Create a Hello World recipe, log style
###################################################################

> cat hello.rb
log "Hi world."

chef run: using chef-client to do work in a recipe

/opt/chef/bin/chef-client --local-mode hello.rb

NOTE: --local-mode indicates not to look for chef server.

## this tells chef to print out informative messages
##
/opt/chef/bin/chef-client --local-mode hello.rb --log_level info


## Chef client modes
##
 - Solo mode:    simulates full Chef server instance locally in memory
          - in-memory server: Chef Zero

 - Client mode:  assumes Chef server is running
      - Server is contacted during Chef run to share state
        with other nodes


###################################################################
## Oh, Hi or OHAI
###################################################################

OHAI:
  - collects system information as a set of attributes

  > /opt/chef/bin/ohia

  To get certain attribues, pass in key value of that attribute to OHAI

  > ohai memory

> /opt/chef/bin/ohai platform
[2018-03-06T20:45:34+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "centos"
]
# /opt/chef/bin/ohai platform_version
[2018-03-06T20:45:38+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "7.3.1611"
]

# /opt/chef/bin/ohai memory/total
[2018-03-06T20:47:48+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "500108kB"
]
# /opt/chef/bin/ohai memory/free
[2018-03-06T20:47:53+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "24012kB"
]
# /opt/chef/bin/ohai virtualization/system
[2018-03-06T20:48:08+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "docker"
]

###################################################################
## Chef cookbooks
###################################################################

cookbook:  way to package chef code
 - represents set of things needed to deploy to nodes
    i.e. webserver, db, app server

cookbook vs. recipe
  - cookbook contains many recipes
  - recipe contains code

cookbook: directory structure that contains info along w/ code

# Create cookbook directory structure with chef

> chef generate cookbook motd

Generating cookbook motd
- Ensuring correct cookbook file content
- Ensuring delivery configuration
- Ensuring correct delivery build cookbook content

Your cookbook is ready. Type `cd motd` to enter it.

There are several commands you can run to get started locally developing and testing your cookbook.
Type `delivery local --help` to see a full list.

Why not start by writing a test? Tests for the default recipe are stored at:

test/smoke/default/default_test.rb

If you'd prefer to dive right in, the default recipe can be found at:

recipes/default.rb

# Following directory structure created:

motd/
motd/recipes
motd/spec
motd/test
motd/Berksfile
motd/chefignore
motd/LICENSE
motd/metadata.rb
motd/README.md
motd/recipes
motd/recipes/default.rb
motd/spec
motd/spec/spec_helper.rb
motd/spec/unit
motd/spec/unit/recipes
motd/spec/unit/recipes/default_spec.rb
motd/test:
motd/test/smoke
motd/test/smoke/default
motd/test/smoke/default/default_test.rb


# Update motd/.kitchen.yml file per previous dokken example to setup
  sandbox environment



Run List (located in .kitchen.yml: suites >  runlist):  Specifies the Chef
   code to evaluate during a Chef run.
   ex.  recipe[<cookbook_name>::<recipe_name>]
        recipe[motd::default]

NOTE: Chef looks for recipes in recipes/ folder.
ex. motd/recipes/default.rb

# kitchen converge: Run recipes in test kitchen.
NOTE: performs a chef run in one or more sandbox environments.
      Behind the scenes kitchen converge:
        1. runs kitchen create to create sandbox environment
        2. copies cookbook to sandbox environment to /opt/kitchen/cookbooks
        3. runs chef-client on cookbook code

> kitchen list
Instance          Driver  Provisioner  Verifier  Transport  Last Action    Last Error
default-centos73  Dokken  Dokken       Inspec    Dokken     <Not Created>  <None>


> kitchen converge default-centos73
-----> Starting Kitchen (v1.20.0)
-----> Creating <default-centos73>...
       Creating container chef-latest
       Creating kitchen sandbox at /home/map/.dokken/kitchen_sandbox/98598a5667-default-centos73
       Creating verifier sandbox at /home/map/.dokken/verifier_sandbox/98598a5667-default-centos73
       Building work image..
       Creating container 98598a5667-default-centos73
       Finished creating <default-centos73> (0m15.36s).
-----> Converging <default-centos73>...
       Creating kitchen sandbox in /home/map/.dokken/kitchen_sandbox/98598a5667-default-centos73
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 6.3.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
Starting Chef Client, version 13.8.5
[2018-03-13T10:40:33+00:00] WARN: Plugin Network: unable to detect ipaddress
[2018-03-13T10:40:33+00:00] WARN: Plugin Network: unable to detect ipaddress
Creating a new client identity for default-centos73 using the validator key.
resolving cookbooks for run list: ["motd::default"]
Synchronizing Cookbooks:
  - motd (0.1.0)
Installing Cookbook Gems:
Compiling Cookbooks...
Converging 0 resources

Running handlers:
Running handlers complete
Chef Client finished, 0/0 resources updated in 00 seconds
       Finished converging <default-centos73> (0m6.66s).
-----> Kitchen is finished. (0m23.03s)


NOTE: There is a weird bug (in dokken?) that causes kitchen converge to fail
      when you are running it inside of a vm.  The only way that I could make it
      work was changing the driver and provisioner in .kitchen.yml to:
      (Make sure kitchen-docker gem is instaleld via:
      > gem install kitchen-docker)


      driver:
        name: docker

      provisioner:
        name: chef_zero


      boyrd> cat .kitchen.yml

      ---
      driver:
        name: docker

      provisioner:
        name: chef_zero

      verifier:
        name: inspec

      platforms:
        - name: centos
          driver:
            image: centos:7.3.1611


NOTE:  The above is in a directory called boyrd (get it, chef boy-r-dee ??)

# kitchen destroy: Tears down test environment

> kitchen destroy
-----> Starting Kitchen (v1.20.0)
-----> Destroying <default-centos73>...
       Deleting kitchen sandbox at /home/map/.dokken/kitchen_sandbox/98598a5667-default-centos73
       Deleting verifier sandbox at /home/map/.dokken/verifier_sandbox/98598a5667-default-centos73
       Finished destroying <default-centos73> (0m1.17s).
-----> Kitchen is finished. (0m2.16s)


## Build out motd recipes and tests
##
  a. Update /etc/motd
  b. Create default login /etc/profile.d/motd.sh


1. First create a test to verify that /etc/motd exists.  Update the following:
motd/test/smoke/default/default_test.rb:

describe file('/etc/motd') do
  it { should be_file }
end

2. Next run kitchen verify to run tests in motd directory:

motd> kitchen verify

NOTE:  This test actually passes because there is a default /etc/motd in
the image.  The solution is to destroy this kitchen image and create one via
kitchen create.
> kitchen destroy
> kitchen create       # kitchen create, creates a clean sandbox
> kitchen list
Instance        Driver  Provisioner  Verifier  Transport  Last Action  Last Error
default-centos  Docker  ChefZero     Inspec    Ssh        Created      <None>
> kitchen login default-centos
> ls -l /etc/motd
-rw-r--r--. 1 root root 0 Jun  7  2013 /etc/motd

3. Update default_test.rb to test that file is NOT empty via its('content')
test:
motd/test/smoke/default/default_test.rb:

describe file('/etc/motd') do
  it { should be_file }
  its('content') { should match(/.+/) }
end

4. Run kitchen verify, this time test fails
.
.
.
-----> Setting up <default-centos>...
       Finished setting up <default-centos> (0m0.00s).
-----> Verifying <default-centos>...
       Loaded tests from {:path=>".vagrant.share.motd.test.smoke.default"}

Profile: tests from {:path=>"/vagrant/share/motd/test/smoke/default"} (tests from {:path=>".vagrant.share.motd.test.smoke.default"})
Version: (not specified)
Target:  ssh://kitchen@localhost:32776


  File /etc/motd
     ✔  should be file
     ∅  content should match /.+/
     expected "" to match /.+/
     Diff:
     @@ -1,2 +1,2 @@
     -/.+/
     +""


Test Summary: 1 successful, 1 failure, 0 skipped
>>>>>> ------Exception-------
>>>>>> Class: Kitchen::ActionFailed
>>>>>> Message: 1 actions failed.
>>>>>>     Verify failed on instance <default-centos>.  Please see .kitchen/logs/default-centos.log for more details
>>>>>> ----------------------
>>>>>> Please see .kitchen/logs/kitchen.log for more details
>>>>>> Also try running `kitchen diagnose --all` for configuration

5.  To add a file to the cookbook (i.e. motd) run chef generate file <filename>:
> chef generate file motd
Recipe: code_generator::cookbook_file
  * directory[/vagrant/share/motd/files/default] action create
    - create new directory /vagrant/share/motd/files/default
    - restore selinux security context
  * template[/vagrant/share/motd/files/default/motd] action create
    - create new file /vagrant/share/motd/files/default/motd
    - update content in file /vagrant/share/motd/files/default/motd from none to e3b0c4
    (diff output suppressed by config)
    - restore selinux security context

NOTE:  File is created in motd/files/default/<filename>. You can put whatever
data in this file.

6.  To copy file from cookbook to target use cookbook_file resource:
https://docs.chef.io/resource_cookbook_file.html

"Use the cookbook_file resource to transfer files from a sub-directory of
COOKBOOK_NAME/files/ to a specified path located on a host that is running
the chef-client.""

Update motd/recipes/default.rb as:

cookbook_file '/etc/motd' do
   source 'motd'
   mode '0644'
end


7. Run kitchen converge / verify to test file deployment and run tests
via kitchen converge and kitchen verify


> kitchen converge
Starting Chef Client, version 13.8.5
[2018-03-19T19:52:26+00:00] WARN: Plugin Network: unable to detect ipaddress
Creating a new client identity for default-centos using the validator key.
resolving cookbooks for run list: ["motd::default"]
Synchronizing Cookbooks:
  - motd (0.1.0)
Installing Cookbook Gems:
Compiling Cookbooks...
Converging 1 resources
Recipe: motd::default
  * cookbook_file[/etc/motd] action create
    - update content in file /etc/motd from e3b0c4 to a34bb9
    --- /etc/motd	2013-06-07 14:31:32.000000000 +0000
    +++ /etc/.chef-motd20180319-171-1mxypaf	2018-03-19 19:52:26.650703170 +0000
    @@ -1 +1,9 @@
    +______________
    +< 'Effin Mooo! >
    +--------------
    +       \   ^__^
    +        \  (oo)\_______
    +           (__)\       )\/\
    +               ||----w |
    +               ||     ||

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 00 seconds
Finished converging <default-centos> (0m13.60s).
-----> Kitchen is finished. (0m15.15s)

> kitchen verify
[vagrant@chefbox motd]$ kitchen verify
-----> Starting Kitchen (v1.19.2)
-----> Setting up <default-centos>...
       Finished setting up <default-centos> (0m0.00s).
-----> Verifying <default-centos>...
       Loaded tests from {:path=>".vagrant.share.motd.test.smoke.default"}

Profile: tests from {:path=>"/vagrant/share/motd/test/smoke/default"} (tests from {:path=>".vagrant.share.motd.test.smoke.default"})
Version: (not specified)
Target:  ssh://kitchen@localhost:32777


  File /etc/motd
     ✔  should be file
     ✔  content should match /.+/

Test Summary: 2 successful, 0 failures, 0 skipped
       Finished verifying <default-centos> (0m0.30s).
-----> Kitchen is finished. (0m1.48s)

8.  Update test/smoke/default/default_test.rb to include motd.sh file check

describe file('/etc/profile.d/motd.sh') do
  it { should be_file }
end

9.  Create file into cookbook via chef generate file <filename> and update
contents in motd/files/default/motd.sh:
> chef generate file motd.sh

Recipe: code_generator::cookbook_file
  * directory[/vagrant/share/motd/files/default] action create (up to date)
  * template[/vagrant/share/motd/files/default/motd.sh] action create
    - create new file /vagrant/share/motd/files/default/motd.sh
    - update content in file /vagrant/share/motd/files/default/motd.sh from none to e3b0c4
    (diff output suppressed by config)
    - restore selinux security context

10. Add cookbook_file resource (command) into recipes/default.rb for motd.sh

cookbook_file '/etc/profile.d/motd.sh' do
  source 'motd.sh'
  mode '0755'
end

11. Add a test to run a command, this is done via inspec command in
/test/smoke/default/default_test.rb

describe command("bash --login -i -c 'cd ~'") do
  its('stdout') { should match('Effin Mooo') }
end

Note: The above command runs an interative login bash shell that cd
to home directory.  This will force the motd to be displayed and
tested against.



12. Run kitchen verify to validate the tests:

motd> kitchen verify
-----> Starting Kitchen (v1.20.0)
-----> Verifying <default-centos>...
       Loaded tests from {:path=>".vagrant.share.motd.test.smoke.default"}

Profile: tests from {:path=>"/vagrant/share/motd/test/smoke/default"} (tests from {:path=>".vagrant.share.motd.test.smoke.default"})
Version: (not specified)
Target:  ssh://kitchen@localhost:32776

  File /etc/motd
     ✔  should be file
     ✔  content should match /.+/
  File /etc/profile.d/motd.sh
     ✔  should be file
  Command bash --login -i -c 'cd ~'
     ✔  stdout should match "Effin Moo"

Test Summary: 4 successful, 0 failures, 0 skipped
       Finished verifying <default-centos> (0m0.31s).
-----> Kitchen is finished. (0m1.64s)


## kitchen test
##

NOTE:  kitchen test will run the entire kitchen test lifecycle (i.e. CI/CD):


   ---------      ---------      ----------      ---------      ---------
  | kitchen | -> | kitchen | -> | kitchen  | -> | kitchen | -> | kitchen |
  | destroy |    | create  |    | converge |    | verify  |    | destroy |
   ---------      ---------      ----------      ---------      ---------


## files / default
##

Chef allows you to provide filter options to use most platform specific files:

files/alice.example.com   # hostname
files/centos-7.3          # platform-verison
files/centos-7            # platform-version components
files/centos              # platform
files/default             # default  (copy to all nodes)


##################################################################
## regex
##################################################################

Regular expressions in ruby
- Enclosed in // or %{}
     /This is a regular expression/
     %{This is a regular expression}
     /.*/

NOTE: backslash to escape:  /\.\/foo/  ==> ./foo

Ruby regex sandbox:   rubular.com

NOTE: Atom plugin: regex-railroad-diagram.  Put cursor on a regex expression
      and a box w/ railroad diagram will explan what it does


##################################################################
## cookbook generators
##################################################################

chef generate generator

- generates a customizable cookbook template

MAP: can you believe this non-sense.  Another chef-ism that drives me crazy!!!


> chef generate generator
Copied built-in generator cookbook to /vagrant/share/code_generator
Add the following to your config file to enable it:
 chefdk.generator_cookbook "/vagrant/share/code_generator"


The following gets created:

 code_generator/
 ├── files
 │   └── default
 │       ├── Berksfile
 │       ├── build_cookbook
 │       │   ├── README.md
 │       │   └── test-fixture-recipe.rb
 │       ├── chefignore
 │       ├── cookbook_readmes
 │       │   ├── README.md
 │       │   └── README-policy.md
 │       ├── delivery-config.json
 │       ├── delivery-project.toml
 │       ├── gitignore
 │       ├── repo
 │       │   ├── cookbooks
 │       │   │   └── example
 │       │   │       ├── attributes
 │       │   │       │   └── default.rb
 │       │   │       ├── metadata.rb
 │       │   │       ├── README.md
 │       │   │       └── recipes
 │       │   │           └── default.rb
 │       │   ├── data_bags
 │       │   │   ├── example
 │       │   │   │   └── example_item.json
 │       │   │   └── README.md
 │       │   ├── dot-chef-repo.txt
 │       │   ├── environments
 │       │   │   ├── example.json
 │       │   │   └── README.md
 │       │   ├── policies
 │       │   │   └── README.md
 │       │   ├── README.md
 │       │   └── roles
 │       │       ├── example.json
 │       │       └── README.md
 │       ├── spec_helper_policyfile.rb
 │       └── spec_helper.rb
 ├── metadata.rb
 ├── recipes
 │   ├── app.rb
 │   ├── attribute.rb
 │   ├── build_cookbook.rb
 │   ├── cookbook_file.rb
 │   ├── cookbook.rb
 │   ├── helpers.rb
 │   ├── policyfile.rb
 │   ├── recipe.rb
 │   ├── repo.rb
 │   ├── resource.rb
 │   └── template.rb
 └── templates
     └── default
         ├── attribute.rb.erb
         ├── build_cookbook
         │   ├── Berksfile.erb
         │   ├── metadata.rb.erb
         │   └── recipe.rb.erb
         ├── cookbook_file.erb
         ├── helpers.rb.erb
         ├── inspec_default_test.rb.erb
         ├── kitchen_policyfile.yml.erb
         ├── kitchen.yml.erb
         ├── LICENSE.all_rights.erb
         ├── LICENSE.apachev2.erb
         ├── LICENSE.gplv2.erb
         ├── LICENSE.gplv3.erb
         ├── LICENSE.mit.erb
         ├── metadata.rb.erb
         ├── Policyfile.rb.erb
         ├── README.md.erb
         ├── recipe.rb.erb
         ├── recipe_spec.rb.erb
         ├── repo
         │   └── gitignore.erb
         ├── resource.rb.erb
         └── template.erb

 19 directories, 58 files


Using a template to create a cookbook:

chef generate cookbook -g <path_to>/code_generator

or

create a file ~/.chef/config.rb with the line:
  chefdk.generator_cookbook = '<path_to>/code_generator'



Updated code_generator/templates/default/kitchen.yml.erb to :

---
driver:
  name: docker
  run_command: /bin/systemd
  cap_add:
    - SYS_ADMIN
  volume:
    - /sys/fs/cgroup
  chef_version: latest
  privileged: true  # needed for docker / systemd upstart
  run_command: /usr/lib/systemd/systemd
  provision_command:
        - yum -y install lsof which  systemd-sysv initscripts net-tools

provisioner:
  name: chef_zero

platforms:
  - name: centos
    driver:
      image: centos:7.4.1708

verifier:
  name: inspec

suites:
  - name: default
    run_list:
      - recipe[<%= cookbook_name %>::default]
    verifier:
      inspec_tests:
        - test/integration/default
    attributes:


NOTE:  This creates a centos 7.4 node and sets up systemd via the
       run_command / cap_add / volume directives.  Also provision_command
       utilizes a docker RUN command to install: lsof which systemd-sysv etc.

Test the updated generator template by running:
> chef generate cookbook gentest -g code_generator

> tree gentest
gentest
├── Berksfile
├── chefignore
├── LICENSE
├── metadata.rb
├── README.md
├── recipes
│   └── default.rb
├── spec
│   ├── spec_helper.rb
│   └── unit
│       └── recipes
│           └── default_spec.rb
└── test
    └── integration
        └── default
            └── default_test.rb

NOTE: looks like a version of chef changed from test/smoke to test/integration.
      Hence updating inspec_tests to test/integration/default

Once code_genterator is setup, update config.rb to utilize it by default:

> ~/.chef/config.rb
chefdk.generator_cookbook = '~/share/code_generator'


Now can generate a cookbook useing code_generator template without having
to use the -g option

> chef generate cookbook gentest


###############################################################
## Copyrights
###############################################################
Add copyright info to ~/.chef/config.rb

chefdk.generator_cookbook = '~/share/code_generator'
chefdk.generator.copyright_holder = 'Me'
chefdk.generator.license = 'apachev2'
chefdk.generator.email = 'me@example.com'


and then update code_generator/recipes/cookbook.rb and recipe.rb

After this line in cookbook.rb and recipe.rb (first line):
context = ChefDK::Generator.context

Add the following
ChefDK::Generator.add_attr_to_context(:copyright_holder,'ME')
ChefDK::Generator.add_attr_to_context(:license,'apachev2')
ChefDK::Generator.add_attr_to_context(:email,'ME@example.com')



###############################################################
## Attributes
###############################################################

chef client has information stored in a db about a node aka Attribute store or
Attributes.

  - Cleared and rebuilt from scratch on every chef run
  - chef-client always has an up-to-date picture of the current state of node

attribute store = ohai info  +  info in chef recipes  +  attribute files

attribute store used to assess:
    - what changes were made prior to current run
    - changes that should be made next to bring the node to desired state.



attributes accessed via node object:  node['keyname'],  node['ipaddress']
can be hierarchical keys:  node['virtualization']['system']

attributes can be declared in:
  recipe files:     recipes/ subdirectory in a cookbook
  attribute files:  attributes/ subdirectory in a cookbook

NOTE: custom attributes declared in recipes / attributes available via node[]


create attribute cookbook via code_generator:
> chef generate cookbook motd_attributes -g code_generator

> chef generate file motd.sh


## Template resources:  copy files to a node using resource

https://docs.chef.io/resource_template.html
  - copies a file from your cookbook to a node, just like resource_cookbook_file
  - support Embedded RuBy (ERB) macros
  - Template can use variables and macros embedded in file

> chef generate template motd

Recipe: code_generator::template
  * directory[/Users/map/chef/finnish_cook/share/motd_attributes/templates] action create
    - create new directory /Users/map/chef/finnish_cook/share/motd_attributes/templates
  * template[/Users/map/chef/finnish_cook/share/motd_attributes/templates/motd.erb] action create
    - create new file /Users/map/chef/finnish_cook/share/motd_attributes/templates/motd.erb
    - update content in file /Users/map/chef/finnish_cook/share/motd_attributes/templates/motd.erb from none to e3b0c4
    (diff output suppressed by config)


Update motd_attributes/tempates/motd.erb to utilize attributes :
> vi motd_attributes/tempates/motd.erb

This node is running on <%= node['virtualization']['system'] %>
This address of this node is <%= node['ipaddress'] %>

NOTE: Notice the <%= attribute using node['key']['word']

ERB: Embedded RuBy
  - Templating language that comes w/ Ruby
  - Expressions enclosed by 'angry squid'
      <%= node['ipaddress'] %>


Update motd_attributes/recipes/default.rb to copy motd.sh and use template

cookbook_file '/etc/profile.d/motd.sh' do
  source 'motd.sh'
  mode '0755'
end

template '/etc/motd' do
  source 'motd.erb'
  mode '0644'
end

> kitchen converge

> kitchen login
Last login: Mon Mar 26 21:48:09 2018 from gateway
This node is running on docker
This address of this node is 172.17.0.2


## Automatic Values:
  - generated by ohai
  - loaded to node object (i.e. /opt/chef/bin/ohai ipaddress )


###############################################################
## Setting Attributes in Recipes
###############################################################

Can declare an attribute in a recipe:

      precedence      attribute name      attribute value
          |              |                   |
          v              v                   v
   node.default["apache"]["dir"] = "/etc/apache2"
     ^
     |
  node attribute

NOTE: Custom attributes should use default level of precedence


# set node attribute

motd_attributes/recipes/default.rb:

node.default['motd_attributes']['message']= "Goovy (not ruby) day"

NOTE: when using custom attributes, use cookbook name as first
      attribute hierarchy (node.default['motd_attributes'])

update motd_attributes/templates/motd.erb :

This node is running on <%= node['virtualization']['system'] %>
This address of this node is <%= node['ipaddress'] %>
<%= node['motd_attributes']['message'] %>

NOTE:  using the attribute that was declared in recipes/default.rb



###############################################################
## Attribute files
###############################################################

Can set attributes in "special" files called Attribute Files

<cookbook>
├── attributes
│   └── default.rb


To generate an attribute file:

> chef generate attribute default

Recipe: code_generator::attribute
  * directory[/vagrant/share/motd_attributes/attributes] action create
    - create new directory /vagrant/share/motd_attributes/attributes
    - restore selinux security context
  * template[/vagrant/share/motd_attributes/attributes/default.rb] action create
    - create new file /vagrant/share/motd_attributes/attributes/default.rb
    - update content in file /vagrant/share/motd_attributes/attributes/default.rb from none to e3b0c4
    (diff output suppressed by config)
    - restore selinux security context

## Add attributes to default.rb

Use the following format to set an attribute in an attribute file:

precedence    attribute name      attribute value
    |            |                   |
    v            v                   v
default["apache"]["dir"] = "/etc/apache2"


NOTE: Omit the node portion.

> motd_attributes/attributes/default.rb:

default['motd_attributes']['Company'] = "Galacticon Corp"


add to motd_attributes/templates/motd.erb:

This node is running on <%= node['virtualization']['system'] %>
This address of this node is <%= node['ipaddress'] %>
<%= node['motd_attributes']['message'] %>
Welcome to <%= node['motd_attributes']['company'] %>

NOTE: the new company attribute that was declared in attributes/default.rb




###############################################################
## Attribute Precedence
###############################################################

    -----------------------              -------------------------
    | Highest Priority    |              |  Automatic (by Ohai)  |
    -----------------------              -------------------------
               |
               |                         -------------------------
               |                         |  Defined in Recipe    |
               |                         -------------------------
               v
    -----------------------              -------------------------
    | Lowest  Priority    |              |  Def in Attribute file |
    -----------------------              -------------------------



NOTE:  - Ohai values cannot be overriden by chef code.
       - Recipe attribute values can override attribute file attributes.
       - Multiple values set at the same level (recipe, etc.) and the
         last one set wins



Can have many attribute files.


> chef generate attribute java
Recipe: code_generator::attribute
  * directory[/vagrant/share/motd_attributes/attributes] action create (up to date)
  * template[/vagrant/share/motd_attributes/attributes/java.rb] action create
    - create new file /vagrant/share/motd_attributes/attributes/java.rb
    - update content in file /vagrant/share/motd_attributes/attributes/java.rb from none to e3b0c4
    (diff output suppressed by config)
    - restore selinux security context

templates/motd.erb:
default['motd_attributes']['java_home'] = '/opt/java'


What if you set same setting across two attribute files

Attribute files are read in A-Z file name order (last in wins)




###############################################################
## Composed Attributes
###############################################################

Composed attributes can be bad

Variable is made up of variable reference

attributes/default.rb:

default['motd_attributes']['tomcat_home'] = '/usr/local/tomcat6'
default['motd_attributes']['tomcat_bin'] = "#{node['motd_attributes']['tomcat_home']}/bin/tomcat"
# /usr/local/tomcat6/bin/tomcat



> chef generate attribute tomcat
default['motd_attributes']['tomcat_home'] = '/usr/local/tomcat8'

NOTE:  Changed tomcat_home value in tomcat attribute file but tomcat_bin
       was set in default.rb !!

NOTE:  "Composed attributes work like environment variables"



###############################################################
## Include_Recipe
###############################################################

Use multiple via include_recipe that isn't on the run list.  Recipes
files can contain executable code, hence chef only runs the receipes
specified.

Create second recipe file:

> chef generate recipe java
  * directory[/vagrant/share/motd_attributes/spec/unit/recipes] action create (up to date)
  * cookbook_file[/vagrant/share/motd_attributes/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[/vagrant/share/motd_attributes/spec/unit/recipes/java_spec.rb] action create_if_missing
    - create new file /vagrant/share/motd_attributes/spec/unit/recipes/java_spec.rb
    - update content in file /vagrant/share/motd_attributes/spec/unit/recipes/java_spec.rb from none to 951fae
    (diff output suppressed by config)
    - restore selinux security context
  * directory[/vagrant/share/motd_attributes/test/smoke/default] action create
    - create new directory /vagrant/share/motd_attributes/test/smoke/default
    - restore selinux security context
  * template[/vagrant/share/motd_attributes/test/smoke/default/java_test.rb] action create_if_missing
    - create new file /vagrant/share/motd_attributes/test/smoke/default/java_test.rb
    - update content in file /vagrant/share/motd_attributes/test/smoke/default/java_test.rb from none to 5569ec
    (diff output suppressed by config)
    - restore selinux security context
  * template[/vagrant/share/motd_attributes/recipes/java.rb] action create
    - create new file /vagrant/share/motd_attributes/recipes/java.rb
    - update content in file /vagrant/share/motd_attributes/recipes/java.rb from none to 5db8b2
    (diff output suppressed by config)
    - restore selinux security context


Add variable to recipes/java.rb:
node.default['motd_attributes']['java_home'] = '/opt/java'
node.default['motd_attributes']['java_bin'] = '/opt/java/bin/java'

NOTE: Note the node. value.  Since it is outside of attributes need to
specify node.

Since motd_attributes::java is not in runlist in .kitchen.yml, use the
include_recipe resource in receipes/default.rb:

include_recipe 'motd_attributes::java'


###############################################################
## Override Precedence
###############################################################

      precedence      attribute name      attribute value
          |              |                   |
          v              v                   v
   node.default["apache"]["dir"] = "/etc/apache2"
     ^
     |
  node attribute

Precedence order:
Automatic:  attributes discovered by ohai
Override:   strongest way to set an attribute
Default:    set in recipes and attribute files


One instance in chef where override precedence is required:

When you want an environment value of override one set in a role

 - Value in attribute file to override one set in a recipe.


change precedence of compnay var to override in attributes/default.rb:

override['motd_attributes']['company'] ='The OverRidden Co'

recipes/default.rb as default setting of :

node.default['motd_attributes']['company'] = "Galacticon Corp"

When mixing precedence (override and default), blahblah wins:

override['motd_attributes']['company'] ='The Galacti-OverRidden-con Co'
default['motd_attributes']['company'] ='The Galacticon Co'

NOTE: Cannot override an automatic variable set by ohai w/ override.



###############################################################
## Attribute Driven Uninstall
###############################################################

Two ways to perform uninstalls w/ chef:
  1. Resource  Driven: action remove, action delete
  1. Attribute Driven: action delete,


Attribute driven cookbook:
https://github.com/facebook/chef-cookbooks/tree/master





Copy text from templates/motd.erb to an attribute in attributes/default.rb:

default['motd_attributes']['motd'] = [
  "This node is running on #{node['virtualization']['system']}",
  "This address of this node is #{node['ipaddress']}",
  "#{node['motd_attributes']['message']}",
  "Welcome to #{node['motd_attributes']['company']}",
  "JAVA_HOME on this node is #{node['motd_attributes']['java_home']}",
  "JAVA_BIN  on this node is #{node['motd_attributes']['java_bin']}",
  "TOMCAT_BIN on this node is #{node['motd_attributes']['tomcat_bin']}",
]

NOTE:  Had to change the embedded ruby notation of <%= %> to variable
notation of #{}.

Add code to templates/motd.erb to read motd variable:

<% node['motd_attributes']['motd'].each do :line: -%>
<%= line %>
<%= end -%>


NOTE: ERB Syntax Expression evaluates an express and inserts the result
as a string:  <%= EXPRESSION %>     [Angry Squid]

With  -%> trims following line break, i.e. end line above

Code Evaluation:  <% CODE %>   [just <% %>]
ex.   <% if node['display_ip'] == true -%>     # CODE
      <%= node['ipaddress'] %>                 # EXPRESSION
      <% end -%>                               # CODE

With  -%> trims following line break
With  <%- trims any preceding indentation



Alot of work for what ????

If you now change attribues/default.rb  and change motd to no value:
default['motd_attributes']['motd'] = []

Then this would act as an "uninstall" by clearing out the motd to blank.

Attribute Driven Precedence:


[------------]
[            ]    [---------------]
[            ]    [               ]    [---------------]
[Site Setting] -> [Region Settings] -> [App Class Settings] -> [Service Settings]
[            ]    [               ]    [---------------]
[            ]    [---------------]
[------------]

NOTE:  Same code can do an uninstall and install simply by changing
       attributes.



###############################################################
## 4 Basic Chef Resources
###############################################################

cookbook_file: transfers a file from the cookbook to node
template:      transfers a file from a cookbook to a node with
               added Embedded Ruby template processing
package:       installs a package using the appropriate package manager
               / installer for the node
service:       manages the lifecycle of a deamon or service


Plan for development:
  1. install nginx package
  2. start nginx service
  3. Configure nginx service to start when machine boots
  4. Write out an HTML home page
  5. Success criteria: We can see the homepage in a web browser



Community cookbooks:  https://github.com/chef-cookbooks


1. Create new cookbook
chef generate cookbook nginx -g code_generator

/> tree nginx
nginx
├── Berksfile
├── LICENSE
├── README.md
├── chefignore
├── metadata.rb
├── recipes
│   └── default.rb
├── spec
│   ├── spec_helper.rb
│   └── unit
│       └── recipes
│           └── default_spec.rb
└── test
    └── integration
        └── default
            └── default_test.rb


Project information located in:
/README.md:  description of project
metadata.rb: gets created when generating cookbook.









###############################################################
## Package Resource
###############################################################

Install a package on target machine.

1.  Create a test to see if package has been installed
http:inspec.io/docs/reference/resources/package

Use the package InSpec audit resource to test if the named package
and/or package version is installed on the system.

describe package('name') do
  it { should be_installed }
end

Add to nginx/test/integration/default/default_test.rb

describe package('nginx') do
  it { should be_installed }
end

> kitchen list
> kitchen converge
> kitchen verify   ## should fail because test looks for nginx / not installed

-----> Starting Kitchen (v1.19.2)
-----> Setting up <default-centos>...
       Finished setting up <default-centos> (0m0.00s).
-----> Verifying <default-centos>...
       Loaded tests from {:path=>".vagrant.share.nginx.test.integration.default"}

Profile: tests from {:path=>"/vagrant/share/nginx/test/integration/default"} (tests from {:path=>".vagrant.share.nginx.test.integration.default"})
Version: (not specified)
Target:  ssh://kitchen@localhost:32768


  System Package
     ∅  nginx should be installed
     expected that `System Package nginx` is installed
     Test Summary: 0 successful, 1 failure, 0 skipped


2.  Create install package recipe
Add code to recipe nginx/recipes/default.rb:

# This is where nginx package resides
package 'epel-release' do
  action :install
end

package 'nginx' do
  action :install
end


> kitchen converge
> kitchen verify

NOTE: action have defaults.  For package resource the default is
      install. Hence, you do not have to specify it.


package 'nginx' do
  action :install
end

becomes ...

package 'epel-release'
package 'nginx'




###############################################################
## Service Resource
###############################################################


1. Add service test to nginx/test/integration/default/default_test.rb:

describe service('nginx') do
  it { should be_installed }
  it { should be_running }
  it { should be_enabled }
end

NOTE: be_enabled means enabled to start on boot.

2. Add service start in nginx/recipes.default.rb:

service 'nginx' do
  action [:enable, :start]
end

NOTE: Need to do two actions for service: enable it and start it.
      This is accomplished by passing an array of two actions to the
      action command:  action[:enable, :start]
      This is done in the order that they are entered.


###############################################################
## Verify content
###############################################################

1.  Add to nginx/test/integration/default/default_test.rb:

## run command to execute curl command and test stdout
##
describe command('curl localhost') do
  its('stdout') { should match('docker') }
end



2. Generate a template:
> chef generate template index.html

Recipe: code_generator::template
  * directory[/vagrant/share/nginx/templates] action create
    - create new directory /vagrant/share/nginx/templates
    - restore selinux security context
  * template[/vagrant/share/nginx/templates/index.html.erb] action create
    - create new file /vagrant/share/nginx/templates/index.html.erb
    - update content in file /vagrant/share/nginx/templates/index.html.erb from none to e3b0c4
    (diff output suppressed by config)
    - restore selinux security context


3. Create a template with embedded ruby in nginx/tempates/index.html.erb:

This site was setup by <%= node['virtualization']['system'] %>

4. Copy / interpelate the erb template in nginx/recipe/default.rb:

template '/usr/share/nginx/html/index.html' do
  source 'index.html.erb'
  mode '0644'
end



###############################################################
## Forward a port
###############################################################

Add to .kitchen.yml under platforms, name, driver:

platforms:
  - name: centos
  driver:
  image: centos:7.4.1708
  forward:
    - 9080:80



test via:  curl localhost:9080



###############################################################
## Cookbook Versioning
###############################################################

Versioning updates done to version in metadata.rb i.e.:
nginx/metadata.rb:

name 'nginx'
maintainer 'ME'
maintainer_email 'ME@example.com'
license 'Apache-2.0'
description 'Installs/Configures a simple website using Nginx'
long_description IO.read("#{File.dirname(__FILE__)}/README.md")
version '0.1.0'



version => Major.Minor.Patch format: version '0.1.0'

Major:  make incompatible API changes
Minor:  add functionality in a backwards-compatible manner
Patch:  make backwards-compatible bug fixes


CHANGELOG.md:  Log of changes made (same level as README.md)

community cookbooks at:
https://supermarket.chef.io

git:
git init    # initalize git repo
git add     # add files to git stage
git status  # shows status of file changes
git commit -m "Commit Message"    # commit changes
git logs    # list all changes
git show <commit_id>   # show actual differences of commit
git show HEAD   # alias for last commit
git remote  # show remote repositories
git push -u origin master   # save commit (-u = upstream) origin master (=branch)

## git add

> git add Notes.txt
> git add share/nginx/CHANGELOG.md

## git status

> git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   Notes.txt
	new file:   share/nginx/CHANGELOG.md

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	.kitchen/
	.vagrant/
	share/nginx/.delivery/
	share/nginx/.gitignore


## git log

  > git log
  commit 549b39c89af6f872002aa713899598990a137a89
  Author: knotknull <zulu_mcduffy@yahoo.com>
  Date:   Wed Apr 4 13:42:23 2018 -0400

      updated Notes.txt

  commit f7abbfe974fd49f862a8cee7dea6a1baa1eccf04
  Author: knotknull <zulu_mcduffy@yahoo.com>
  Date:   Wed Apr 4 13:36:45 2018 -0400

      port forwarding




## git show <commit_id>

  > git show 0896db876e72
  commit 0896db876e7246ea45feca3aed263e5c0ca331e2
  Author: knotknull <zulu_mcduffy@yahoo.com>
  Date:   Tue Mar 27 16:25:24 2018 -0400

      Updated Notes.txt

  diff --git a/Notes.txt b/Notes.txt
  index 9fbc82b..3767b3a 100644
  --- a/Notes.txt
  +++ b/Notes.txt
  @@ -1300,6 +1300,10 @@ default['motd_attributes']['java_home'] = '/opt/java'

   What if you set same setting across two attribute files

  +Attribute files are read in A-Z file name order (last in wins)
  +
  +
  +




## git show HEAD

  > git show HEAD
  commit 549b39c89af6f872002aa713899598990a137a89
  Author: knotknull <zulu_mcduffy@yahoo.com>
  Date:   Wed Apr 4 13:42:23 2018 -0400

      updated Notes.txt

  diff --git a/Notes.txt b/Notes.txt
  index afade5e..99b880e 100644
  --- a/Notes.txt
  +++ b/Notes.txt
  @@ -1696,7 +1696,6 @@ template '/usr/share/nginx/html/index.html' do
   end


  -NOTE: for some reason this template is being converted to an empty file

   ###############################################################
   ## Forward a port
  @@ -1713,9 +1712,7 @@ platforms:



  -
  -
  -
  +test via:  curl localhost:9080


## git remote

> git remote -v
origin	https://github.com/knotknull/finnish_cook.git (fetch)
origin	https://github.com/knotknull/finnish_cook.git (push)


# git push
> git push -u origin master
Branch master set up to track remote branch master from origin.
Everything up-to-date



###############################################################
## Cookbook Pipelines w/ Travis CI
###############################################################




create new file:  .travis.yml

matrix: tag in .travis.yml allows you to run several commands in parallel:

matrix:
  include:
    - before_script:
      - eval "$(/opt/chefdk/bin/chef shell-init bash)"
      - /opt/chefdk/bin/chef --version
      - /opt/chefdk/bin/cookstyle --version
    - script:
      - /opt/chefdk/bin/chef exec cookstyle




signup https://travis-ci.org
setup github project on travis-ci.orig, links github account with travis-ci

commit code to github with .travis.yml should trigger a build in travis-ci.org.

NOTE: can use markdown code to place  build / test badges in READM.md
i.e.

[![Build Status](https://travis-ci.org/misheska-orielly/nginx.svg?branch=master)](https://travis-ci.org/misheska-orielly/nginx)





###############################################################
## Manage Nginx
###############################################################
  - manage nginx.conf


1. Generate template files
chef generate template nginx.conf

2. Copy original nginx.conf file from container to host
  a. run docker ps to get container id of running image
  docker ps
  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                         NAMES
  e61088c4fa1e        86a677116ced        "/usr/lib/systemd/sys"   5 minutes ago       Up 5 minutes        0.0.0.0:32768->22/tcp, 0.0.0.0:9080->80/tcp   defaultcentos-vagrant-chefbox-mqkh6o5f

  b. copy file w/ docker cp:
       docker cp e61088c4fa1e:/etc/nginx/nginx.conf templates/nginx.conf.erb

3. After updating nginx.conf.erb, update recipes/default.rb to manage template

directory '/etc/nginx' do
  owner 'root'
  group 'root'
  mode 0755
end

template '/etc/nginx/nginx.conf' do
  source 'nginx.conf.erb'
  notifies :restart, 'service[nginx]', :immediately
end

4. Create default website configuration, generate template
> chef generate template default.conf

5. Copy nginx conf again
> docker cp e61088c4fa1e:/etc/nginx/nginx.conf templates/default.conf.erb

NOTE: To have nginx reload configs (instead of restarting):
> service nginx reload     or
/etc/init.d/nginx reload

to utilize reload, update recipes/default.rb:

service 'nginx' do
  supports status: true, restart: true, reload: true
  action [:enable, :start]
end
.....

template '/etc/nginx/nginx.conf' do
  source 'nginx.conf.erb'
  notifies :reload, 'service[nginx]', :immediate
end

template '/etc/nginx/conf.d/default.conf' do
  source 'default.conf.erb'
  notifies :reload, 'service[nginx]', :immediate
end

NOTE: notice notifies is reload and not restat




###############################################################
## Inspec: Automated Validation
###############################################################

## Scan a Docker Node
##

Compliance profile == chef cookbook
Compliance profile: directory structure where inspec code is packaged

DevSec Hardining Framewrok: https://github.com/dev-sec
ex.
  dev-sec/linux-baseline
  dev-sec/ssh-baseline
  dev-sec/nginx-baseline
  dev-sec/apache-baseline
  dev-sec/openstack-baseline
  dev-sec/ssl-baseline
  dev-sec/linux-patch-baseline


1. Run linux-baseline against a docker image

2. Start up centos73 image with docker:
docker run --name mycentos73 --detach --tty --interactive centos:7.3.1611 /bin/bash

3. Clone linux-baseline git repo
git clone https://github.com/dev-sec/linux-baseline.git

4. Run inspec compliance linux-baseline against docker vm
NOTE: Must be in directory above linux-baseline git directory
> ls linux-baseline
[vagrant@chefbox share]$ ls linux-baseline
CHANGELOG.md  controls  Gemfile  inspec.yml  libraries  LICENSE  Rakefile  README.md

> inspec exec linux-baseline --target docker://mycentos73

Profile: DevSec Linux Security Baseline (linux-baseline)
Version: 2.2.0
Target:  docker://c88afc343e887821364b1edf01345878b45e7f4ef79fba1413cb5a221ac3de54

  ✔  package-01: Do not run deprecated inetd or xinetd
     ✔  System Package inetd should not be installed
     ✔  System Package xinetd should not be installed
  ✔  package-02: Do not install Telnet server
     ✔  System Package telnetd should not be installed
  ✔  package-03: Do not install rsh server
     ✔  System Package telnetd should not be installed
  ✔  package-05: Do not install ypserv server (NIS)
     ✔  System Package ypserv should not be installed
  ✔  package-06: Do not install tftp server
     ✔  System Package tftp-server should not be installed
  ×  package-07: Install syslog server package
     ×  System Package rsyslog should be installed
     expected that `System Package rsyslog` is installed
.
.
.
✔  sysctl-29: Disable loading kernel modules
   ✔  Kernel Parameter kernel.modules_disabled value should eq 0
×  sysctl-30: Magic SysRq
   ×  Kernel Parameter kernel.sysrq value should eq 0

   expected: 0
        got: 16

   (compared using ==)

✔  sysctl-31a: Secure Core Dumps - dump settings
   ✔  Kernel Parameter fs.suid_dumpable value should cmp == /(0|2)/
↺  sysctl-31b: Secure Core Dumps - dump path
   ↺  Skipped control due to only_if condition.
✔  sysctl-32: kernel.randomize_va_space
   ✔  Kernel Parameter kernel.randomize_va_space value should eq 2
✔  sysctl-33: CPU No execution Flag or Kernel ExecShield
   ✔  /proc/cpuinfo Flags should include NX


Profile Summary: 25 successful controls, 28 control failures, 1 control skipped
Test Summary: 68 successful, 57 failures, 1 skipped

NOTE: source is located in linux-baseline/controls/sysctl_spec.rb

ex.


control 'sysctl-20' do
  impact 1.0
  title 'Disable acceptance of all IPv6 redirected packets'
  desc 'Disable acceptance of all redirected packets these prevents Man-in-the-Middle attacks.'
  only_if { !container_execution }
  describe kernel_parameter('net.ipv6.conf.default.accept_redirects') do
    its(:value) { should eq 0 }
  end
  describe kernel_parameter('net.ipv6.conf.all.accept_redirects') do
    its(:value) { should eq 0 }
  end
end

control block is a test.
"describe" block is an audit resource name found in inspec documentation at:
https://www.inspec.io/docs/reference/resources/kernel_parameter/

NOTE: can put more than one describe block in a control block

5. Stop and remove container
> docker stop mycentos73
> docker rm mycentos73


Can run inspec code at the end of a chef run via the audit cookbook:
https://github.com/chef-cookbooks/audit
The audit cookbook allows you to run InSpec profiles as part of a Chef Client run.
It downloads configured profiles from various sources like Chef Compliance,
Chef Supermarket or Git and reports audit runs to Chef Compliance or Chef Automate.


## Scan a Node via ssh
##

inspec exec linux-baseline -t ssh://root@1.22.333.4444 --key-files ~/.ssh/id_rsa
or
inspec exec linux-baseline \
-t ssh://ec2-54-88-60-52.compute-1.amazonaws.com \
--user=ec2-user \
--key-files=./AMZN_Key.pem \
--sudo

NOTE:  This is a real inspec exec linux-baseline run from AWS EC2 instance


Profile: DevSec Linux Security Baseline (linux-baseline)
Version: 2.2.0
Target:  ssh://ec2-user@ec2-54-88-60-52.compute-1.amazonaws.com:22

  ✔  package-01: Do not run deprecated inetd or xinetd
     ✔  System Package inetd should not be installed
     ✔  System Package xinetd should not be installed
  ✔  package-02: Do not install Telnet server
     ✔  System Package telnetd should not be installed
  ✔  package-03: Do not install rsh server
     ✔  System Package telnetd should not be installed
  ✔  package-05: Do not install ypserv server (NIS)
     ✔  System Package ypserv should not be installed
  ✔  package-06: Do not install tftp server
     ✔  System Package tftp-server should not be installed
  ✔  package-07: Install syslog server package
     ✔  System Package rsyslog should be installed
  ×  package-08: Install auditd (1 failed)
     ✔  System Package audit should be installed
     ✔  Audit Daemon Config log_file should cmp == "/var/log/audit/audit.log"
     ✔  Audit Daemon Config log_format should cmp == "raw"
     ✔  Audit Daemon Config flush should match /^INCREMENTAL|INCREMENTAL_ASYNC$/
     ×  Audit Daemon Config max_log_file_action should cmp == "keep_logs"

     expected: "keep_logs"
          got: ROTATE

     (compared using `cmp` matcher)

     ✔  Audit Daemon Config space_left should cmp == 75
     ✔  Audit Daemon Config action_mail_acct should cmp == "root"
     ✔  Audit Daemon Config space_left_action should cmp == "SYSLOG"
     ✔  Audit Daemon Config admin_space_left should cmp == 50
     ✔  Audit Daemon Config admin_space_left_action should cmp == "SUSPEND"
     ✔  Audit Daemon Config disk_full_action should cmp == "SUSPEND"
     ✔  Audit Daemon Config disk_error_action should cmp == "SUSPEND"

.
.
.
.

×  sysctl-27: Disable neighbor solicitations to send out per address
   ×  Kernel Parameter net.ipv6.conf.default.dad_transmits value should eq 0

   expected: 0
        got: 1

   (compared using ==)

×  sysctl-28: Assign one global unicast IPv6 addresses to each interface
   ×  Kernel Parameter net.ipv6.conf.default.max_addresses value should eq 1

   expected: 1
        got: 16

   (compared using ==)

✔  sysctl-29: Disable loading kernel modules
   ✔  Kernel Parameter kernel.modules_disabled value should eq 0
×  sysctl-30: Magic SysRq
   ×  Kernel Parameter kernel.sysrq value should eq 0

   expected: 0
        got: 16

   (compared using ==)

✔  sysctl-31a: Secure Core Dumps - dump settings
   ✔  Kernel Parameter fs.suid_dumpable value should cmp == /(0|2)/
↺  sysctl-31b: Secure Core Dumps - dump path
   ↺  Skipped control due to only_if condition.
✔  sysctl-32: kernel.randomize_va_space
   ✔  Kernel Parameter kernel.randomize_va_space value should eq 2
✔  sysctl-33: CPU No execution Flag or Kernel ExecShield
   ✔  /proc/cpuinfo Flags should include NX


Profile Summary: 27 successful controls, 26 control failures, 1 control skipped
Test Summary: 81 successful, 44 failures, 1 skipped



## Scan a local machine via inspec
##
inspec exec linux-baseline



## Formatting modes of inspec exec
##
--format=FORMAT    NOTE: Deprecated

--reporter=one two:/output/file/path] cli, documentation, html, progress, json, json-min, json-rspec, junit


> inspec exec linux-baseline --reporter=cli

Profile: DevSec Linux Security Baseline (linux-baseline)
Version: 2.2.0
Target:  local://

 ✔  package-01: Do not run deprecated inetd or xinetd
    ✔  System Package inetd should not be installed
    ✔  System Package xinetd should not be installed
 ✔  package-02: Do not install Telnet server
    ✔  System Package telnetd should not be installed

> inspec exec linux-baseline --reporter=documentation

System Package inetd
  should not be installed

System Package xinetd
  should not be installed

System Package telnetd
  should not be installed

> inspec exec linux-baseline --reporter=html

<div id="div_group_26" class="example_group passed">
  <dl style="margin-left: 0px;">
  <dt id="example_group_26" class="passed">File /etc/shadow</dt>
    <script type="text/javascript">moveProgressBar('23.8');</script>
    <dd class="example passed"><span class="passed_spec_name">should not be readable by group</span><span class='duration'>0.00009s</span></dd>
  </dl>
</div>


> inspec exec linux-baseline --reporter=progress
........FFFFFFFFFFF................................FF.FF.FF..F....F....FFFFFFFF...FF....FFFFFF.....F.FFFFFFF.FFFFFFFFFFF.F.*..

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) Operating System Detection Skipped control due to only_if condition.
     # Not yet implemented
     #


Failures:

  1) Audit Daemon Config log_file should cmp == "/var/log/audit/audit.log"
     Failure/Error: DEFAULT_FAILURE_NOTIFIER = lambda { |failure, _opts| raise failure }

       expected: "/var/log/audit/audit.log"
            got:

       (compared using `cmp` matcher)
     # linux-baseline/controls/package_spec.rb:94:in `block (3 levels) in load_with_context'

  2) Audit Daemon Config log_format should cmp == "raw"
     Failure/Error: DEFAULT_FAILURE_NOTIFIER = lambda { |failure, _opts| raise failure }

       expected: "raw"
            got:

       (compared using `cmp` matcher)
     # linux-baseline/controls/package_spec.rb:95:in `block (3 levels) in load_with_context'



> inspec exec linux-baseline --reporter=json
{"platform":{"name":"centos","release":"7.4.1708"},"profiles":
[{"name":"linux-baseline","version":"2.2.0",
"sha256":"36c8083c0bae5155310b34632e4947754404fd8256f1b75dd07df969d3b41d64",
"title":"DevSec Linux Security Baseline","maintainer":"DevSec Hardening Framework Team",
"summary":"Test suite for best practice Linux OS hardening","license":"Apache-2.


> inspec exec linux-baseline --reporter=json-min
{"controls":[{"id":"package-01","profile_id":"linux-baseline",
"profile_sha256":"36c8083c0bae5155310b34632e4947754404fd8256f1b75dd07df969d3b41d64",
"status":"passed","code_desc":"System Package inetd should not be installed"},
{"id":"package-01","profile_id":"linux-baseline",
"profile_sha256":"36c8083c0bae5155310b34632e4947754404fd8256f1b75dd07df969d3b41d64",
"status":"passed","code_desc":"System Package xinetd should not be installed"}



> inspec exec linux-baseline --reporter=json-rspec
"/opt/chefdk/embedded/lib/ruby/gems/2.4.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:126:in `should'",
"linux-baseline/controls/os_spec.rb:125:in `block (3 levels) in load_with_context'",
"/opt/chefdk/embedded/lib/ruby/gems/2.4.0/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:254:in
`instance_exec'","/opt/chefdk/embedded/lib/ruby/gems/2.4.0/gems/rspec-core-3.7.1/lib/rspec/core/example.rb:254
:in `block in run'","/opt/chefdk/embedded/lib/ruby/gems/2.4.0/gems/rs



> inspec exec linux-baseline --reporter=json-junit

<?xml version='1.0'?>
<testsuites>
  <testsuite name='linux-baseline' tests='126' failed='55'>
    <testcase name='System Package inetd should not be installed' classname='linux-baseline.package-01' time='0.345166953'/>
    <testcase name='System Package xinetd should not be installed' classname='linux-baseline.package-01' time='0.347338303'/>
    <testcase name='System Package telnetd should not be installed' classname='linux-baseline.package-02' time='0.344765683'/>
    <testcase name='System Package telnetd should not be installed' classname='linux-baseline.package-03' time='0.345806186'/>
    <testcase name='System Package ypserv should not be installed' classname='linux-baseline.package-05' time='0.34381562'/>
    <testcase name='System Package tftp-server should not be installed' classname='linux-baseline.package-06' time='0.348752759'/>
    <testcase name='System Package rsyslog should be installed' classname='linux-baseline.package-07' time='0.353309838'/>
    <testcase name='System Package audit should be installed' classname='linux-baseline.package-08' time='0.346223413'/>
    <testcase name='Audit Daemon Config log_file should cmp == &quot;/var/log/audit/audit.log&quot;' classname='linux-baseline.package-08' time='0.016799262'>
      <failure message='
expected: &quot;/var/log/audit/audit.log&quot;
     got:


## Control Resource
##
          v-----  name of control
control 'os-04' do
  title 'Dot in PATH variable'                       <--- Title of control
  desc "This checks if there is a dot in the PATH "  <--- description of control
  impact 1.0                             <---- numerical impact from 0.0 to 1.0
end



## Describe Resource
##
Actual test to be done

control '<name>' do
  describe '<audit_resource>' do
    if { should <matcher> }
  end
end

## example of contains check
##

control 'os-03' do
  title 'Check owner and permissions for /etc/passwd'
  describe file('/etc/passwd') do
    if { should exist }
    if { should be_file }
  end
end

## Negative test with should_not
##

control 'os-02' do
  title 'Check owner and permissions for /etc/shadow'
  describe file('/etc/shadow') do
    if { should_not be_executable }
  end
end


## Test w/ parameters
##

control 'os-03' do
  title 'Check owner and permissions for /etc/passwd'
  describe file('/etc/passwd') do
    if { should_not be_readable.by('owner') }
  end
end

## Get info on audit resource
##
> inspec shell
inspec> help file

inspec> help file
Name: file

Description:

Use the file InSpec audit resource to test all system file types, including files, directories, symbolic links, named pipes, sockets, character devices, block devices, and doors.

Example:

describe file('path') do
  it { should exist }
  it { should be_file }
  it { should be_readable }
  it { should be_writable }
  it { should be_executable.by_user('root') }
  it { should be_owned_by 'root' }
  its('mode') { should cmp '0644' }
end


Web Reference:

https://www.inspec.io/docs/reference/resources/file



## Its form: non-default usage of an attribute
##

control 'os-02' do
  title 'Check owner and permissions for /etc/shadow'
  describe file('/etc/shadow') do
    its('group') { should eq 'root' }
  end
end





###############################################################
## Inspec: Create Compliance Profile
###############################################################

Compliance Profile Structure:
  README.md
  inspec.yml
  controls/

default_test.rb:

control 'ChefDK is installed' do
  describe file('/opt/chefdk/bin/chef') do
    it { should exist }
  end

  describe command('/opt/chefdk/bin/chef --version') do
    its('stdout') { should match(/Chef Development Kit Version: [^01]\.\d+\.\d/) }
  end
end


## Add ruby code to a control
##

NOTE:  Any control block in inspec can contain ruby code

## Regular Inspec
##
control 'ChefDK is installed' do
  describe file('/opt/chefdk/bin/chef') do
    it { should exist }
  end

  describe command('/opt/chefdk/bin/chef --version') do
    its('stdout') { should match(/Chef Development Kit Version: [^01]\.\d+\.\d/) }
  end
end

## Ruby code in control block !!
##
control 'ChefDK is at least 2.0.0' do
  chef_ver=command('/opt/chefdk/bin/chef --version').stdout
  ver=chef_ver.match(/Chef Development Kit Version: (\d+\.\d+\.\d+)/)[1]
  major_ver=ver.split('.')[0].to_i
  minor_ver=ver.split('.')[1].to_i
  patch_ver=ver.split('.')[2].to_i

  describe(major_ver) do
    it { should be >= 2}
  end

  describe(minor_ver) do
    it { should be >= 4}
  end


  describe(patch_ver) do
    it { should be >= 0}
  end

end


## Package ruby code
##
libraries directory contain custom ruby code. Can export ruby code from
control block into libraries/chefdk_version.rb and reference class in control block:

libraries/chefdk_version.rb:

class ChefdkVersion < Inspec.resource(1)
  name 'chefdk_version'

  def initialize
    chef_ver = inspec.command('/opt/chefdk/bin/chef --version').stdout
    ver=chef_ver.match(/Chef Development Kit Version: (\d+\.\d+\.\d+)/)[1]
    @major_ver=ver.split('.')[0]
    @minor_ver=ver.split('.')[1]
    @patch_ver=ver.split('.')[2]
  end

  def major_ver
    @major_ver.to_i
  end

  def minor_ver
    @minor_ver.to_i
  end

  def patch_ver
    @patch_ver.to_i
  end

end

controls/default.rb:

control 'ChefDK is at least 2.0.0' do

    describe(chefdk_version) do
      its('major_ver') { should be >= 2}
      its('minor_ver') { should be >= 5}
      its('patch_ver') { should be >= 0}
    end
end

Runnig inspec again gives:

> inspec exec chef_workstation

Profile: Chef Development Workstation Compliance Profile (chef_workstation)
Version: 1.0.0
Target:  local://

  ✔  ChefDK is installed: File /opt/chefdk/bin/chef
     ✔  File /opt/chefdk/bin/chef should exist
     ✔  Command /opt/chefdk/bin/chef --version stdout should match /Chef Development Kit Version: [^01]\.\d+\.\d/
  ✔  ChefDK is at least 2.0.0: chefdk_version
     ✔  chefdk_version major_ver should be >= 2
     ✔  chefdk_version minor_ver should be >= 5
     ✔  chefdk_version patch_ver should be >= 0


Profile Summary: 2 successful controls, 0 control failures, 0 controls skipped
Test Summary: 5 successful, 0 failures, 0 skipped



###############################################################
## Compliance Profiles w/ Test Kitchen
###############################################################

Allows you to share controls and custom matchers between chef and inspec cookbooks

Can reference compliance profiles via http address directly.


https://github.com/dev-sec/nginx-baseline.git


nginx/.kitchen.yml:
.
.
.
suites:
  - name: default
    run_list:
      - recipe[nginx::default]
    verifier:
      inspec_tests:
        - test/integration/default
        - https://github.com/dev-sec/nginx-baseline.git


NOTE: See Test Kitchen Verifier fo Inspec: https://github.com/chef/kitchen-inspec




##################################################################
##  Capture Machine Config w/ HashiCorp Packer
##################################################################

Packer is an image manager
packer.io

## Create linux virtal machine so that image can be captured by packer
##

1. Download desktop iso image from
http://releases.ubuntu.com/xenial/


2. Make updates to image and shutdown

3. In VirtualBox, export image to .ova format (OVF 2.0)
  File > Export Appliance >
      File location:  xyz.ova
      File format:    OVF 2.0
                            > Continue  > Export

4. Create 2 files for packer (create a directory first)
      mkdir ubuntu1604_desktop
      touch ubuntu1604_desktop.json
      touch ubuntu1604_desktop.vagrantfile

NOTE:  ubuntu1604_desktop.json is file used by packer


ubuntu1604_desktop.vagrantfile:
Vagrant.configure("2") do |config|
  config.vm.define "vagrant-ubuntu1604-desktop"
  config.vm.box = "ubuntu1604-desktop"

  config.vm.provider :virtualbox do |v, override|
    v.gui = true
    v.customize ["modifyvm", :id, "--memory", 1024]
    v.customize ["modifyvm", :id, "--cpus", 1]
    v.customize ["modifyvm", :id, "--vram", "128"]
    v.customize ["setextradata", "global", "GUI/MaxGuestResolution", "any"]
    v.customize ["setextradata", :id, "CustomVideoMode1", "1024x768x32"]
    v.customize ["modifyvm", :id, "--ioapic", "on"]
    v.customize ["modifyvm", :id, "--rtcuseutc", "on"]
    v.customize ["modifyvm", :id, "--accelerate3d", "off"]
    v.customize ["modifyvm", :id, "--accelerate2dvideo", "off"]
  end
end


ubuntu1604_desktop.json:
{
  "builders": [
    {
      "type": "virtualbox-ovf",
      "source_path": "/Users/map/Documents/ubuntu1604_desktop.ova",
      "ssh_username": "vagrant",
      "ssh_password": "vagrant",
      "shutdown_command": "echo 'vagrant' | sudo -S shutdown -P now",
      "guest_additions_mode": "disable",
      "vboxmanage": [
        [ "modifyvm", "{{.Name}}", "--memory", "1024" ],
        [ "modifyvm", "{{.Name}}", "--cpus", "1" ]
      ]
    }
  ],
  "post-processors": [
    {
      "keep_input_artifact": false,
      "output": "ubuntu1604_desktop.box",
      "type": "vagrant",
      "vagrantfile_template": "ubuntu1604_desktop.vagrantfile"
    }
  ]
}

NOTE: "source_path":  in  ubuntu1604_desktop.json should be the location
of the actual exported .ova file.


5. Validate that json file is correct for packer:
> packer validate ubuntu1604_desktop.json

6. Generate box file with packer:
> packer build ubuntu1604_desktop.json

NOTE: packer outputs a file as packer-virtualbox-ovf-1122334455.ovf
Test kitchen uses vagrant tools to interact with VMs instead of virtualbox
directly.  Ultimate output is ubuntu1604_desktop.box.  The .box file is just
a tar file that contains:
 - Vagrantfile
 - box.ovf
 - metadata.json
 - packer-virtualbox-ovf-1122334455-disk2.vmdk



## Verify Linux Desktop VM
##

1. cd to where .box file is created
> cd ubuntu1604_desktop

2. vagrant box add --name ubuntu1604_desktop ubuntu1604_desktop.box

NOTE: copies .box file to Vagrant "central store" that vagrant uses
to create new vm instances.

3. List vagrant box to check that it is available:
> vagrant box list

4. Test vagrant box by creating a new Vagrantfile:
  a. mkdir testbox
  b. cd testbox
  c. vagrant init ubuntu1604_desktop
  c. Review Vagrant file
  d. Review Vagrant file
  e. Spin up box
    > vagrant up
  f. Login
    > vagrant ssh
  g. Destroy
    > vagrant destroy

5. Remove vagrant box:
  > vagrant box remove ubuntu1604_desktop

6. To recreate box again :
  > vagrant box add --name ubuntu1604_desktop ubuntu1604_desktop.box



##################################################################
##  Real World: Manage Dev Env w/ Chef
##################################################################

Plan:
  - create wrapper cookbook to manage:
    - cookbook to install chefdk
    - cookbook to install git
    - cookbook to install atom
  - Utilize Berkshelf (dependency manager)
  - Multi-platform coding
    - Linux
    - macOS

## Create chefk_workstation wrapper cookbook
##

1. mkdir capstone && cd capstone

2. If ~/.chef/config.rb conaints dokken setting, comment out to:
# chefdk.generator_cookbook = '~/code_generator'

3. Generate chef_workstation cookbook:
> chef generate cookbook chef_workstation

4. cd chef_workstation and update .kithcen.yml to:
platforms:
  - name: ubuntu-1604-desktop
    driver:
      box: ubuntu1604-desktop
  - name: macos1012-desktop
    driver:
      cache_directory: false
      box: macos1012-desktop

5. Verify by running kitchen list
> kitchen lists
Instance                     Driver   Provisioner  Verifier  Transport  Last Action    Last Error
default-ubuntu-1604-desktop  Vagrant  ChefZero     Inspec    Ssh        <Not Created>  <None>
default-macos1012-desktop    Vagrant  ChefZero     Inspec    Ssh        <Not Created>  <None>

6. Run kitchen create for ubuntu:
> kitchen create ubuntu

7. Verify with kitchen list  (clean up w/ kitchen destroy)


## Berkshelf and dependency management
##
1. Create Berkshelf depenency cookbooks:

chef generate cookbook git
chef generate cookbook atom
chef generate cookbook chefdk

2. Update .kithcen.yml platforms section in git / atom / chefdk
   cookbooks to :

platforms:
  - name: ubuntu-1604-desktop
    driver:
      box: ubuntu1604-desktop
  - name: macos1012-desktop
    driver:
      cache_directory: false
      box: macos1012-desktop

5. Verify by running kitchen list in each depenency directory

> cd atom
> kitchen list
Instance                     Driver   Provisioner  Verifier  Transport  Last Action    Last Error
default-ubuntu-1604-desktop  Vagrant  ChefZero     Inspec    Ssh        <Not Created>  <None>
default-macos1012-desktop    Vagrant  ChefZero     Inspec    Ssh        <Not Created>  <None>
> cd ../git
> kitchen list
Instance                     Driver   Provisioner  Verifier  Transport  Last Action    Last Error
default-ubuntu-1604-desktop  Vagrant  ChefZero     Inspec    Ssh        <Not Created>  <None>
default-macos1012-desktop    Vagrant  ChefZero     Inspec    Ssh        <Not Created>  <None>
> cd ../chefdk
> kitchen list
Instance                     Driver   Provisioner  Verifier  Transport  Last Action    Last Error
default-ubuntu-1604-desktop  Vagrant  ChefZero     Inspec    Ssh        <Not Created>  <None>
default-macos1012-desktop    Vagrant  ChefZero     Inspec    Ssh        <Not Created>  <None>


6. Update wrapper cookbook capstone/chef_workstation to run 3 new cookbooks.
Update chef_workstation/recipes/default.rb:

include_recipe 'git'
include_recipe 'chefdk'
include_recipe 'atom'

6a. Need to update where the location of git / chefdk / atom are.
Update chef_workstation/Berksfile:

cookbook 'atom', path: '../atom'
cookbook 'git', path: '../git'
cookbook 'chefdk', path: '../chefdk'



## Depends statement
##

1. To wire dependencies, need to update capstone/chef_workstation/metadata.rb:
                  v-------  is same as >0.1.0 and < 1.0
depends 'git', '~> 0.1' # '>0.1.0',  '<1.0'
depends 'atom', '~> 0.1' # '>0.1.0',  '<1.0'
depends 'chefdk', '~> 0.1' # '>0.1.0',  '<1.0'


NOTE:  include_recipe in chef_workstation/recipes/default.rb requires updates
to:
    - chef_workstation/Berksfile      ## Location of file
    - chef_workstation/metadata.rb    ## Version of file


## Perform Chef runs locally
##

0. How to run wrapper cookbook w/ all dependencies

1. cd capstone/chefk_workstation and load dependencies with berks tool
NOTE: add solo.sh to capstone/chefk_workstation/

> berks vendor
Resolving cookbook dependencies...
Fetching 'atom' from source at ../atom
Fetching 'chef_workstation' from source at .
Fetching 'chefdk' from source at ../chefdk
Fetching 'git' from source at ../git
Using atom (0.1.0) from source at ../atom
Using chefdk (0.1.0) from source at ../chefdk
Using git (0.1.0) from source at ../git
Using chef_workstation (0.1.0) from source at .
Vendoring atom (0.1.0) to /vagrant/share/capstone/chef_workstation/berks-cookbooks/atom
Vendoring chef_workstation (0.1.0) to /vagrant/share/capstone/chef_workstation/berks-cookbooks/chef_workstation
Vendoring chefdk (0.1.0) to /vagrant/share/capstone/chef_workstation/berks-cookbooks/chefdk
Vendoring git (0.1.0) to /vagrant/share/capstone/chef_workstation/berks-cookbooks/git


NOTE: This commands pulls in all dependencies and creates Berksfile.lock
which contains all dependencies and dependency graph

DEPENDENCIES
  atom
    path: ../atom
  chef_workstation
    path: .
    metadata: true
  chefdk
    path: ../chefdk
  git
    path: ../git

GRAPH
  atom (0.1.0)
  chef_workstation (0.1.0)
    atom (~> 0.1)
    chefdk (~> 0.1)
    git (~> 0.1)
  chefdk (0.1.0)
  git (0.1.0)


NOTE: berks vendor == pulling cookbooks locally.  All dependencies are in
chef_workstation/berks-cookbooks/
atom/
chef_workstation/
chefdk/
git/

2. Run chef-client locally:
> cd chef_workstation
> sudo chef-client --local-mode --config-option \
  cookbook_path="$(pwd)/berks-cookbooks"\ --override-runlist chef_workstation


## Create git cookbook
##

1. Write tests in capstone/git/test/integration/default/default_test.rb:
describe(command('git --version')) do
  its('stdout') { should match(/git version/) }
end

if os.debian?
  describe(package('git')) do
    it { should be_installed }
  end
end

if os.family == 'darwin'
  describe(command('pkgutil --pkg-info=com.apple.pkg.CLTools_Executables')) do
    its('exit_status') { should be 0 }
  end
end

2. Test by running kitchen converge / kitchen verify in git directory

3. Update capstone/git/recipes/default.rb:

if node['platform_family'] == 'debian'
  include_recipe 'apt'
  package 'git'
elsif node['platform_family'] == 'mac_os_x'
  include_recipe 'build_essential'
end

NOTE: there is include_recipe calls, this means updating Berksfile and
metadata.rb !!!!

4. Update capstone/git/Berksfile:
  NOTE: no update becuase apt and build_essential is in chef supermarket

5. Update capstone/git/metadata.rb:

depends 'apt', '~> 6.0.0'
depends 'build-essential', '~> 8.0.0'




## Create atom cookbook
##

1. Write tests in capstone/atom/test/integration/default/default_test.rb:
if os.debian?
  describe package('atom') do
    it { should be_installed }
  end
end

if os.name == 'mac_os_x'
  describe file('/Applications/Atom.app') do
    it { should exist }
  end
end


2. Test by running kitchen converge / kitchen verify in git directory

3. Add depends statements to  capstone/git/metadata.rb:
depends 'apt', '~> 6.0.0'
depends 'zip_app', '~> 0.2.4'

NOTE: Don't need include for these cookbooks and both are located in supermarket



4. Update capstone/atom/recipes/default.rb:

case node['platform_family']
when 'debian'
  apt_repository 'atom-ppa' do
    uri 'http://ppa.launchpad.net/webupd8team/atom/ubuntu'
    distribution node['lsb']['codename']
    components['main']
    keyserver 'keyserver.ubuntu.com'
    key 'EEA14886'
  end

  package 'atom'
when 'mac_os_x'
  zip_app_package 'atom' do
    source 'https://github.com/atom/atom/releases/download/v1.12.9/atom-mac.zip'
  end
end

NOTE: No include_file !!



## Create chefdk cookbook
##

1. Copy previous chef_workstation to capstone as chef_workstation_cp

2. Link chef_workstation_cp to chefdk tests by updating inspec_test in
captsone/chefdk/.kitchen.yml in

suites:
  - name: default
    run_list:
      - recipe[chefdk::default]
    verifier:
      inspec_tests:
        - path: ../chef_workstation_cp

3. Update capstone/chefdk/recipes/default.rb


case node['platform_family']
when 'debian'
  puts "MAP: #{Chef::Config[:file_cache_path]}"
  src = 'https://packages.chef.io/files/stable/chefdk/1.1.16/ubuntu/16.04/chefdk_1.1.16-1_amd64.deb'
  local_path = "#{Chef::Config[:file_cache_path]}/#{::File.basename(src)}"
  remote_file local_path do
    source src
  end

  dpkg_package local_path

  bashrc_file = '/etc/bash.bashrc'
  file bashrc_file do
    content lazy {
      txt = 'eval "$(chef shell-init bash)"'
      lines = ::File.read(bashrc_file).split("\n")
      lines << txt unless lines.include?(txt)
      lines.join("\n")
    }
  end
when 'mac_os_x'
  dmg_package 'ChefDK' do
    source 'https://packages.chef.io/files/stable/chefdk/1.1.16/mac_os_x/10.12/chefdk-1.1.16-1.dmg'
    type 'pkg'
    volumes_dir 'Chef Development Kit'
    package_id 'com.getchef.pkg.chefdk'
    app 'chefdk-1.1.16-1'
  end
end

NOTE: content lazy tells chef to evaluate ruby code later.

4. Add dmg dependency to chefdk/metadata.rb:

depends 'dmg', '~> 3.1.0'



## Final local chef run
##

1. run inspec from capstone directory:
> inspec exec chef_workstation_cp

2. Run solo.sh script from capsonte/chef_workstation:
> cd capstone/chef_workstation
> ./solo.sh



##################################################################
##  Troubleshooting Chef
##################################################################

Chef-shell: interative chef session

> chef-shell
chef (13.6.4)> node['ipaddress']
 => "10.0.2.15"
chef (13.6.4)> node['memory']
 => {"swap"=>{"cached"=>"992kB", "total"=>"1572860kB", "free"=>"1571228kB"},
 "hugepages"=>{"total"=>"0", "free"=>"0", "reserved"=>"0", "surplus"=>"0"},
 "total"=>"500108kB", "free"=>"34012kB", "buffers"=>"5212kB",
 "cached"=>"234936kB", "active"=>"218012kB", "inactive"=>"132252kB",
 "dirty"=>"0kB", "writeback"=>"0kB", "anon_pages"=>"109324kB",
 "mapped"=>"27592kB", "slab"=>"78056kB", "slab_reclaimable"=>"43448kB",
 "slab_unreclaim"=>"34608kB", "page_tables"=>"4548kB", "nfs_unstable"=>"0kB",
 "bounce"=>"0kB", "commit_limit"=>"1822912kB", "committed_as"=>"517536kB",
 "vmalloc_total"=>"34359738367kB", "vmalloc_used"=>"9160kB",
 "vmalloc_chunk"=>"34359721980kB", "hugepage_size"=>"2048kB"}
chef (13.6.4)>



## can load a module to use w/ chef-spec_helper_policyfile
chef (13.6.4)> require 'pry'
chef (13.6.4)> pry
chef (13.6.4)> node.attributes  ## pages thru results
=> {"tags"=>[],
 "cpu"=>
  {"0"=>
    {"vendor_id"=>"GenuineIntel",
     "family"=>"6",
=> {"tags"=>[],
 "cpu"=>
  {"0"=>
    {"vendor_id"=>"GenuineIntel",
     "family"=>"6",
     "model"=>"61",
     "model_name"=>"Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz",
     "stepping"=>"4",
     "mhz"=>"2700.000",
     "cache_size"=>"3072 KB",
     "physical_id"=>"0",
     "core_id"=>"0",


chef (13.6.4)> node.attributes.sort.each { |k,v| p k}; nil
NOTE: run w/ ruby code to just get top level values

debug values:
chef (13.6.4)> node.debug_value('ipaddress')

pry(main)> node.debug_value('ipaddress')
=> [["default", :not_present],
 ["env_default", :not_present],
 ["role_default", :not_present],
 ["force_default", :not_present],
 ["normal", :not_present],
 ["override", :not_present],
 ["role_override", :not_present],
 ["env_override", :not_present],
 ["force_override", :not_present],
 ["automatic", "10.0.2.15"]]


Chef debugging tips:
stevendanna.github.io/blog/2012/01/28/shef-debugging-tips-1/


## Profiling chef cookbooks
##

1. Update .kitchen.yml of cookbook to profile, add profile_ruby: true

provisioner:
  name: chef_zero
  # You may wish to disable always updating cookbooks in CI or other testing environments.
  # For example:
  #   always_update_cookbooks: <%= !ENV['CI'] %>
  always_update_cookbooks: true
  profile_ruby: true



[[  RESOURCES  ]]

  Chef Open Training Materials
  https://www.chef.io/contact/open-training

  Git Workflow
  https://learn.chef.io/skills/tools-for-open-source/

  O'Reilly Collaborating with Git
  http://shop.oreilly.com/product/0636920034872.do

  Joy of Automating
  https://www.youtube.com/watch?v=ucd4v9R-XNA













##
