
##  Download and install chefdk
##

curl  https://packages.chef.io/files/stable/chefdk/2.4.17/el/7/chefdk-2.4.17-1.el7.x86_64.rpm  -o chefdk-2.4.17-1.el7.x86_64.rpm -#
sudo yum install chefdk-2.4.17-1.el7.x86_64.rpm


##  To install Guest Additions automatically in the Vagrant VM
##
vagrant plugin install vagrant-vbguest


##  When installing chef, it installs into /opt/chefdk but creates soft links from /usr/bin to chefdk i.e.:
##  NOTE:  need to update .bashrc to link git and ruby versions installed in /opt/chefdk/embedded
##
ls -l /usr/bin/chef
lrwxrwxrwx. 1 root root 20 Feb 20 14:18 /usr/bin/chef -> /opt/chefdk/bin/chef

## Enter the below to .bashrc to get environment to point to git
## and ruby installed with chef.
##
eval "$(chef shell-init bash)"

## Jargon Alert !!
##

   - Programs in Chef called recipe.
   - recipe:  file that contains chef code (*.rb = ruby)
   - Chef is Ruby Domain Specific Language
   - Resource (i.e. file below) building blocks for chef code
      - defines actions for chef to perform
      - bracketed by do / end statement pair
      - Generic layout of resource:
            <resource_type> '<name>' do
              <attribute statement>
            end
   - Attribute is a parameter to a resource


## Chef recipe exmple
##

hello.rb:
---------

file 'hello.txt' do
  content 'Welcome to Finnish Cook'
end

## NOTE: file name can be single or double quotes.  Content is an attribute
## or parameter that is passed to the file resource.
## https://docs.chef.io/resource_file.html
##

## To run chef code, call chef-apply, it runs single files of chef .rb code.
##
chef-apply hello.rb

## Creates a file called hello.txt with the content described in the chef file
##
[vagrant@chefbox share]$ ls -ltr
total 12
-rw-r--r--. 1 vagrant vagrant 21 Feb 20 22:55 itchy
-rw-r--r--. 1 vagrant vagrant 60 Feb 20 23:22 hello.rb
-rw-r--r--. 1 vagrant vagrant 23 Feb 20 23:24 hello.txt
[vagrant@chefbox share]$ cat hello.txt
Welcome to Finnish Cook


## Cookstyle: Chef took to check syntax (lint checker)
## eg.     cookstyle hello.rb

## Change ruby linter to cookstyle
##
1. Start Atom
2. Atom > Preferences > Install
3. In Search packages enter linter-rubocop
4. After install go to settings
5. In Settings > Command, enter:
/opt/chefdk/bin/cookstyle
6. tab out of field
7. test against a .rb file

## Automate verification w/ inspec
## inspec: Inspect Infrastructure
##
inspec runs tests to validate the infrastructure that is created
by you chef reciple that you create:

1. create hello_test.rb to hold testing code (_test is a convention)
NOTE: This test detects the existence of hello.txt as well as its' contents

describe file('hello.txt') do
  it { should be_file }
  its('content') { should match('Welcome to Finnish Cook') }
end

NOTE: brace {} are short cut for do / end


2. At cli run inspec w/ inspec test file
> inspec exec hello_test.rb

Profile: tests from hello_test.rb (tests from hello_test.rb)
Version: (not specified)
Target:  local://


  File hello.txt
     ✔  should be file
     ✔  content should match "Welcome to Finnish Cook"

Test Summary: 2 successful, 0 failures, 0 skipped


Anatomy of a test file
- Verification building block
describe <resource_type> '<name>' do
  <checks>
end

INSPEC EXMAPLES at: https://docs.chef.io/inspec_reference.html
NOTE: resources mentioned in chef recipe will most likely have an 'audit'
inspec resource by the same name i.e. file.



 - Chef is a declarative language to express desired state (like SQL)

   -----------      ------------
  |           |    |            |      --------
  | resources |    | attributes |  -> | recipe |    <-    chef
  |           |    |            |      --------
   -----------      ------------

   - chef looks at resources and attributes in recipe and figures out how
     to get to desired state

   - You specify what end result must look like (desired state) not
     how to achieve it.

NOTE: can reference env vars as:   "#{ENV['HOME']}
      variable reference == #{}
      A string MUST have double quotes if it contains a variable reference to
      substitute the value of the variable, otherwise it would just print
      the varialbe name.  ENV variable is referenced as a hash:
             ${HOME} == #{ENV['HOME']}

     file "#{ENV['HOME']}/stone.txt" do
       content 'Written to stone.txt'
     end

## How to do an uninstall (by telling chef what NOT to do)
##
##  Resource Driven vs. Attribute Drive unistall

## Resource Driven
##
All resources can define what NOT to do.  For example, for file resource you
can change action.

i.e. implicit default action for file is create action.  To override the
default action explicitly call the delete action.
The ":" denotes a constant value (aka ruby symbol)

 file "#{ENV['HOME']}/stone.txt" do
   action :delete
 end

NOTE: Cannot provide a default "Undo" function.  Can use limited uninstall using
Attribute Driven uninstall
https://code.facebook.com/posts/1909042435988955/facebook-chef-cookbooks/

Scaling systems configuration at Facebook
https://www.youtube.com/watch?v=-YtZiVxEiJ8


## Chef Concepts
   - recipe:    file containing Chef code
   - resource:  abstraction for something managed by Chef (i.e. file)
   - attribute: parameters passed to a resource


##################################################################
##  Test Kitchen
##################################################################

Test Kitchen tool to deploy recipes to sandbox environment. Test Kitchen
creates a sandbox environment that simulates production env.

Test kitchen uses docker to create sandbox env.

> kitchen --version
Test Kitchen version 1.19.2

kitchen-dokken: test-kitchen plugin that provisions rapid cookbook
testing and container development using Docker and Chef

Run initialization command for kitchen env:
> kitchen init --driver=kitchen-dokken --provisioner=dokken
create  .kitchen.yml
create  chefignore
create  test/integration/default

NOTE: creates :
  .kitchen.yml:  configuration file for sandbox environment
  chefignore:    configuration file used for when you package up environment
  test:          creates test directory for inspec tests

## Verify kitchen.yml
##
Verify kitchen.yml file using command:  kitchen list

> kitchen list
Instance          Driver  Provisioner  Verifier  Transport  Last Action    Last Error
default-centos73  Dokken  Dokken       Inspec    Dokken     <Not Created>  <None>


## Create test instance: kitchen create
##
> kitchen create --log_level=debug
-----> Starting Kitchen (v1.19.2)
-----> Creating <default-centos73>...
D      driver - pulling chef/chef:latest centos 7.3.1611
D      driver - pulling chef/chef:latest chef/chef latest
D      driver - creating volume container chef-latest from chef/chef:latest
       Creating container chef-latest
D      driver - create_container args {"name"=>"chef-latest", "Cmd"=>"true", "Image"=>"chef/chef:latest", "HostConfig"=>{"NetworkMode"=>"dokken"}}
       Creating kitchen sandbox at /home/vagrant/.dokken/kitchen_sandbox/8d7db201dc-default-centos73
       Creating verifier sandbox at /home/vagrant/.dokken/verifier_sandbox/8d7db201dc-default-centos73
       Building work image..
D      driver - starting 8d7db201dc-default-centos73
       Creating container 8d7db201dc-default-centos73
D      driver - create_container args {"name"=>"8d7db201dc-default-centos73", "Cmd"=>["sh", "-c", "trap exit 0 SIGTERM; while :; do sleep 1; done"], "Image"=>"8d7db201dc-default-centos73:latest", "Hostname"=>"dokken", "Env"=>nil, "ExposedPorts"=>nil, "Volumes"=>nil, "HostConfig"=>{"Privileged"=>false, "VolumesFrom"=>["chef-latest"], "Binds"=>["/home/vagrant/.dokken/kitchen_sandbox/8d7db201dc-default-centos73:/opt/kitchen", "/home/vagrant/.dokken/verifier_sandbox/8d7db201dc-default-centos73:/opt/verifier"], "Dns"=>nil, "DnsSearch"=>nil, "Links"=>[], "CapAdd"=>[], "CapDrop"=>[], "SecurityOpt"=>[], "NetworkMode"=>"dokken", "PortBindings"=>nil, "Tmpfs"=>{}}, "NetworkingConfig"=>{"EndpointsConfig"=>{"dokken"=>{"Aliases"=>["dokken"]}}}}
       Finished creating <default-centos73> (1m6.46s).
-----> Kitchen is finished. (1m7.99s)


##  verify test instance was created: kitchen list
##
> kitchen list
Instance          Driver  Provisioner  Verifier  Transport  Last Action  Last Error
default-centos73  Dokken  Dokken       Inspec    Dokken     Created      <None>

NOTE: Last Action changed from  <Not Created> to Created !!

##  verify the running vm instances via docker
##
> docker ps
docker ps
CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS               NAMES
97c627d7f537        8d7db201dc-default-centos73:latest   "sh -c 'trap exit 0 S"   7 minutes ago       Up 7 minutes                            8d7db201dc-default-centos73


##  Login to the running test kitchen vm via: kitchen login default-centos73
##
> kitchen login default-centos73

##  Destroy the test kitchen vm via: kitchen destroy default-centos73
##
> kitchen destroy default-centos73
-----> Starting Kitchen (v1.19.2)
-----> Destroying <default-centos73>...
       Deleting kitchen sandbox at /home/vagrant/.dokken/kitchen_sandbox/8d7db201dc-default-centos73
       Deleting verifier sandbox at /home/vagrant/.dokken/verifier_sandbox/8d7db201dc-default-centos73
       Finished destroying <default-centos73> (0m0.28s).
-----> Kitchen is finished. (0m1.83s)

# Verify that running instance is destroyed via: kitchen list
> kitchen list
Instance          Driver  Provisioner  Verifier  Transport  Last Action    Last Error
default-centos73  Dokken  Dokken       Inspec    Dokken     <Not Created>  <None>

# Verify that running instance is destroyed via: docker ps
> docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES


###################################################################
## YAML side note
###################################################################

http://yaml-online-parser.appspot.com

List: collection of ordered values (sequence)
---
- Automate this
- Automate That
- Automate the other thing

NOTE: must be at same spacing level, number of spaces doesn't matter as long
as they are aligned.  Also, lists can be entered as [1,2,3].  Put lists inside
of lists with additional dashes:
- item 1
- item 2
  - item 2.1
  - item 2.2
-item 3

# for comments
Name/Value:  aka Map, Dictionary.  key / value pairs
url: http://x1.com
port: 8080
mode: 0664

# Nested maps via indentation:
website1:
  url: http://x1.com
  port: 8080
  mode: 0664
  owner: alice
website2:
  url: http://x2.com
  port: 9090
  mode: 0644
  owner: bob

# 1-line form of a hash:
website2:
  { url: "http://x2.com", port: 9090, mode: 0644, owner: bob }


###################################################################
## End of YAML side note
###################################################################

Test Kitchen config file has:
 - driver:     configure behavior of kitchen driver
 - transport:  describes networking protocol for host to communicate w/ sandbox
               (ssh, winrm, or dokken)
 - provisioner: how to run automation code (aka chefsolo, ansible, dokken)
                mounts chef code, does not install into vm
 - platforms:   configures sandbox instance (name and docker image)
 - verifier:    language to use for test kitchen (i.e. inspec)
 - suites:      defines parameters for testing

 Test Kitchen Lifecycle:

 kitchen create  ->  kitchen list  ->  kitchen login  ->  kitchen destroy


###################################################################
## Chef environment determination
###################################################################

Chef uses ohai to determine inventory of machines it manages

node: a machine that is managed by chef, runs recipes to get desired state.
includes: physical, virtual, cloud and container.
          switches, routers, storage, phones, watches, fitness devices, etc.

 - Node needs chef client installed to be managed by chef.


###################################################################
## How to install Chef on a production node
###################################################################

Download chef client package at https://downloads.chef.io
or
at https://docs.chef.io/install_omnibus.html via curl:

curl -L https://omnitruck.chef.io/install.sh | sudo bash

NOTE: Chefdk contains chef-client but chef-client is smaller

# chef-apply vs. chef-client
 - chef-apply  runs code in a single file
 - chef-client runs code across many recipe files at once


###################################################################
## Create a Hello World recipe, log style
###################################################################

> cat hello.rb
log "Hi world."

chef run: using chef-client to do work in a recipe

/opt/chef/bin/chef-client --local-mode hello.rb

NOTE: --local-mode indicates not to look for chef server.

## this tells chef to print out informative messages
##
/opt/chef/bin/chef-client --local-mode hello.rb --log_level info


## Chef client modes
##
 - Solo mode:    simulates full Chef server instance locally in memory
          - in-memory server: Chef Zero

 - Client mode:  assumes Chef server is running
      - Server is contacted during Chef run to share state
        with other nodes


###################################################################
## Oh, Hi or OHAI
###################################################################

OHAI:
  - collects system information as a set of attributes

  > /opt/chef/bin/ohia

  To get certain attribues, pass in key value of that attribute to OHAI

  > ohai memory

> /opt/chef/bin/ohai platform
[2018-03-06T20:45:34+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "centos"
]
# /opt/chef/bin/ohai platform_version
[2018-03-06T20:45:38+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "7.3.1611"
]

# /opt/chef/bin/ohai memory/total
[2018-03-06T20:47:48+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "500108kB"
]
# /opt/chef/bin/ohai memory/free
[2018-03-06T20:47:53+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "24012kB"
]
# /opt/chef/bin/ohai virtualization/system
[2018-03-06T20:48:08+00:00] INFO: The plugin path /etc/chef/ohai/plugins does not exist. Skipping...
[
  "docker"
]

###################################################################
## Chef cookbooks
###################################################################

cookbook:  way to package chef code
 - represents set of things needed to deploy to nodes
    i.e. webserver, db, app server

cookbook vs. recipe
  - cookbook contains many recipes
  - recipe contains code

cookbook: directory structure that contains info along w/ code

# Create cookbook directory structure with chef

> chef generate cookbook motd

Generating cookbook motd
- Ensuring correct cookbook file content
- Ensuring delivery configuration
- Ensuring correct delivery build cookbook content

Your cookbook is ready. Type `cd motd` to enter it.

There are several commands you can run to get started locally developing and testing your cookbook.
Type `delivery local --help` to see a full list.

Why not start by writing a test? Tests for the default recipe are stored at:

test/smoke/default/default_test.rb

If you'd prefer to dive right in, the default recipe can be found at:

recipes/default.rb

# Following directory structure created:

motd/
motd/recipes
motd/spec
motd/test
motd/Berksfile
motd/chefignore
motd/LICENSE
motd/metadata.rb
motd/README.md
motd/recipes
motd/recipes/default.rb
motd/spec
motd/spec/spec_helper.rb
motd/spec/unit
motd/spec/unit/recipes
motd/spec/unit/recipes/default_spec.rb
motd/test:
motd/test/smoke
motd/test/smoke/default
motd/test/smoke/default/default_test.rb


# Update motd/.kitchen.yml file per previous dokken example to setup
  sandbox environment



Run List (located in .kitchen.yml: suites >  runlist):  Specifies the Chef
   code to evaluate during a Chef run.
   ex.  recipe[<cookbook_name>::<recipe_name>]
        recipe[motd::default]

NOTE: Chef looks for recipes in recipes/ folder.
ex. motd/recipes/default.rb

# kitchen converge: Run recipes in test kitchen.
NOTE: performs a chef run in one or more sandbox environments.
      Behind the scenes kitchen converge:
        1. runs kitchen create to create sandbox environment
        2. copies cookbook to sandbox environment to /opt/kitchen/cookbooks
        3. runs chef-client on cookbook code

> kitchen list
Instance          Driver  Provisioner  Verifier  Transport  Last Action    Last Error
default-centos73  Dokken  Dokken       Inspec    Dokken     <Not Created>  <None>


> kitchen converge default-centos73
-----> Starting Kitchen (v1.20.0)
-----> Creating <default-centos73>...
       Creating container chef-latest
       Creating kitchen sandbox at /home/map/.dokken/kitchen_sandbox/98598a5667-default-centos73
       Creating verifier sandbox at /home/map/.dokken/verifier_sandbox/98598a5667-default-centos73
       Building work image..
       Creating container 98598a5667-default-centos73
       Finished creating <default-centos73> (0m15.36s).
-----> Converging <default-centos73>...
       Creating kitchen sandbox in /home/map/.dokken/kitchen_sandbox/98598a5667-default-centos73
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 6.3.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
Starting Chef Client, version 13.8.5
[2018-03-13T10:40:33+00:00] WARN: Plugin Network: unable to detect ipaddress
[2018-03-13T10:40:33+00:00] WARN: Plugin Network: unable to detect ipaddress
Creating a new client identity for default-centos73 using the validator key.
resolving cookbooks for run list: ["motd::default"]
Synchronizing Cookbooks:
  - motd (0.1.0)
Installing Cookbook Gems:
Compiling Cookbooks...
Converging 0 resources

Running handlers:
Running handlers complete
Chef Client finished, 0/0 resources updated in 00 seconds
       Finished converging <default-centos73> (0m6.66s).
-----> Kitchen is finished. (0m23.03s)


NOTE: There is a weird bug (in dokken?) that causes kitchen converge to fail
      when you are running it inside of a vm.


# kitchen destroy: Tears down test environment

> kitchen destroy                  
-----> Starting Kitchen (v1.20.0)
-----> Destroying <default-centos73>...
       Deleting kitchen sandbox at /home/map/.dokken/kitchen_sandbox/98598a5667-default-centos73
       Deleting verifier sandbox at /home/map/.dokken/verifier_sandbox/98598a5667-default-centos73
       Finished destroying <default-centos73> (0m1.17s).
-----> Kitchen is finished. (0m2.16s)



##
